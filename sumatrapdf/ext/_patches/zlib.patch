diff -rPu5 zlib.orig\infback9\inftree2.h zlib\infback9\inftree2.h
--- zlib.orig\infback9\inftree2.h	Thu Jan 01 01:00:00 1970
+++ zlib\infback9\inftree2.h	Tue May 14 21:21:21 2013
@@ -0,0 +1,4 @@
+/* SumatraPDF: support Deflate64 */
+extern int inflate_table9 OF((codetype type, unsigned short FAR *lens,
+                             unsigned codes, code FAR * FAR *table,
+                             unsigned FAR *bits, unsigned short FAR *work));
diff -rPu5 zlib.orig\infback9\inftree9.c zlib\infback9\inftree9.c
--- zlib.orig\infback9\inftree9.c	Mon Apr 29 00:57:10 2013
+++ zlib\infback9\inftree9.c	Wed Dec 18 14:33:15 2013
@@ -254,11 +254,11 @@
             /* if first time, transition to sub-tables */
             if (drop == 0)
                 drop = root;
 
             /* increment past last table */
-            next += 1U << curr;
+            next += (size_t)1 << curr; /* SumatraPDF: prevent C4334 */
 
             /* determine length of next table */
             curr = len - drop;
             left = (int)(1 << curr);
             while (curr + drop < max) {
diff -rPu5 zlib.orig\inflate.c zlib\inflate.c
--- zlib.orig\inflate.c	Mon Aug 13 09:02:40 2012
+++ zlib\inflate.c	Tue May 14 21:21:21 2013
@@ -82,10 +82,15 @@
 
 #include "zutil.h"
 #include "inftrees.h"
 #include "inflate.h"
 #include "inffast.h"
+/* SumatraPDF: support Deflate 64 */
+#include "inftree2.h"
+#if defined(MAKEFIXED) || defined(BUILDFIXED)
+#error Deflate64 support is incompatible with BUILDFIXED
+#endif
 
 #ifdef MAKEFIXED
 #  ifndef BUILDFIXED
 #    define BUILDFIXED
 #  endif
@@ -162,20 +167,21 @@
             windowBits &= 15;
 #endif
     }
 
     /* set number of window bits, free window if different */
-    if (windowBits && (windowBits < 8 || windowBits > 15))
+    if (windowBits && (windowBits < 8 || windowBits > 16))
         return Z_STREAM_ERROR;
     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
         ZFREE(strm, state->window);
         state->window = Z_NULL;
     }
 
     /* update state and reset the rest of it */
     state->wrap = wrap;
     state->wbits = (unsigned)windowBits;
+    state->inflate_table = windowBits == 16 ? inflate_table9 : inflate_table;
     return inflateReset(strm);
 }
 
 int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)
 z_streamp strm;
@@ -292,14 +298,21 @@
         /* do this just once */
         virgin = 0;
     }
 #else /* !BUILDFIXED */
 #   include "inffixed.h"
+
+#define lenfix lenfix9
+#define distfix distfix9
+#   include "inffix9.h"
+#undef lenfix
+#undef distfix
+
 #endif /* BUILDFIXED */
-    state->lencode = lenfix;
+    state->lencode = state->wbits == 16 ? lenfix9 : lenfix;
     state->lenbits = 9;
-    state->distcode = distfix;
+    state->distcode = state->wbits == 16 ? distfix9 : distfix;
     state->distbits = 5;
 }
 
 #ifdef MAKEFIXED
 #include <stdio.h>
@@ -901,11 +914,11 @@
             state->ndist = BITS(5) + 1;
             DROPBITS(5);
             state->ncode = BITS(4) + 4;
             DROPBITS(4);
 #ifndef PKZIP_BUG_WORKAROUND
-            if (state->nlen > 286 || state->ndist > 30) {
+            if (state->nlen > 286 || (state->wbits < 16 && state->ndist > 30)) {
                 strm->msg = (char *)"too many length or distance symbols";
                 state->mode = BAD;
                 break;
             }
 #endif
@@ -921,11 +934,11 @@
             while (state->have < 19)
                 state->lens[order[state->have++]] = 0;
             state->next = state->codes;
             state->lencode = (const code FAR *)(state->next);
             state->lenbits = 7;
-            ret = inflate_table(CODES, state->lens, 19, &(state->next),
+            ret = state->inflate_table(CODES, state->lens, 19, &(state->next),
                                 &(state->lenbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid code lengths set";
                 state->mode = BAD;
                 break;
@@ -939,10 +952,11 @@
                     here = state->lencode[BITS(state->lenbits)];
                     if ((unsigned)(here.bits) <= bits) break;
                     PULLBYTE();
                 }
                 if (here.val < 16) {
+                    NEEDBITS(here.bits);
                     DROPBITS(here.bits);
                     state->lens[state->have++] = here.val;
                 }
                 else {
                     if (here.val == 16) {
@@ -995,20 +1009,20 @@
                values here (9 and 6) without reading the comments in inftrees.h
                concerning the ENOUGH constants, which depend on those values */
             state->next = state->codes;
             state->lencode = (const code FAR *)(state->next);
             state->lenbits = 9;
-            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
+            ret = state->inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                 &(state->lenbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid literal/lengths set";
                 state->mode = BAD;
                 break;
             }
             state->distcode = (const code FAR *)(state->next);
             state->distbits = 6;
-            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
+            ret = state->inflate_table(DISTS, state->lens + state->nlen, state->ndist,
                             &(state->next), &(state->distbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid distances set";
                 state->mode = BAD;
                 break;
@@ -1017,11 +1031,11 @@
             state->mode = LEN_;
             if (flush == Z_TREES) goto inf_leave;
         case LEN_:
             state->mode = LEN;
         case LEN:
-            if (have >= 6 && left >= 258) {
+            if (state->wbits < 16 && have >= 6 && left >= 258) {
                 RESTORE();
                 inflate_fast(strm, out);
                 LOAD();
                 if (state->mode == TYPE)
                     state->back = -1;
@@ -1063,11 +1077,11 @@
             if (here.op & 64) {
                 strm->msg = (char *)"invalid literal/length code";
                 state->mode = BAD;
                 break;
             }
-            state->extra = (unsigned)(here.op) & 15;
+            state->extra = (unsigned)(here.op) & (state->wbits < 16 ? 15 : 31);
             state->mode = LENEXT;
         case LENEXT:
             if (state->extra) {
                 NEEDBITS(state->extra);
                 state->length += BITS(state->extra);
diff -rPu5 zlib.orig\inflate.h zlib\inflate.h
--- zlib.orig\inflate.h	Sat Dec 26 02:32:08 2009
+++ zlib\inflate.h	Tue May 14 21:21:21 2013
@@ -75,10 +75,14 @@
                 LIT -> LEN
     Process trailer:
         CHECK -> LENGTH -> DONE
  */
 
+typedef int inflate_table_func OF((codetype type, unsigned short FAR *lens,
+                             unsigned codes, code FAR * FAR *table,
+                             unsigned FAR *bits, unsigned short FAR *work));
+
 /* state maintained between inflate() calls.  Approximately 10K bytes. */
 struct inflate_state {
     inflate_mode mode;          /* current inflate mode */
     int last;                   /* true if processing last block */
     int wrap;                   /* bit 0 true for zlib, bit 1 true for gzip */
@@ -117,6 +121,7 @@
     unsigned short work[288];   /* work area for code table building */
     code codes[ENOUGH];         /* space for code tables */
     int sane;                   /* if false, allow invalid distance too far */
     int back;                   /* bits back of last unprocessed length/lit */
     unsigned was;               /* initial length of match */
+    inflate_table_func *inflate_table; /* SumatraPDF: support Deflate64 */
 };
