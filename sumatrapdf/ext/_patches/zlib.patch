diff -rPu5 zlib.orig\infback9\inftree2.h zlib\infback9\inftree2.h
--- zlib.orig\infback9\inftree2.h	Thu Jan 01 01:00:00 1970
+++ zlib\infback9\inftree2.h	Wed May 08 21:15:55 2013
@@ -0,0 +1,4 @@
+/* SumatraPDF: support Deflate64 */
+extern int inflate_table9 OF((codetype type, unsigned short FAR *lens,
+                             unsigned codes, code FAR * FAR *table,
+                             unsigned FAR *bits, unsigned short FAR *work));
diff -rPu5 zlib.orig\inflate.c zlib\inflate.c
--- zlib.orig\inflate.c	Mon Aug 13 09:02:40 2012
+++ zlib\inflate.c	Wed May 08 21:15:55 2013
@@ -82,10 +82,15 @@
 
 #include "zutil.h"
 #include "inftrees.h"
 #include "inflate.h"
 #include "inffast.h"
+/* SumatraPDF: support Deflate 64 */
+#include "inftree2.h"
+#if defined(MAKEFIXED) || defined(BUILDFIXED)
+#error Deflate64 support is incompatible with BUILDFIXED
+#endif
 
 #ifdef MAKEFIXED
 #  ifndef BUILDFIXED
 #    define BUILDFIXED
 #  endif
@@ -162,20 +167,21 @@
             windowBits &= 15;
 #endif
     }
 
     /* set number of window bits, free window if different */
-    if (windowBits && (windowBits < 8 || windowBits > 15))
+    if (windowBits && (windowBits < 8 || windowBits > 16))
         return Z_STREAM_ERROR;
     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
         ZFREE(strm, state->window);
         state->window = Z_NULL;
     }
 
     /* update state and reset the rest of it */
     state->wrap = wrap;
     state->wbits = (unsigned)windowBits;
+    state->inflate_table = windowBits == 16 ? inflate_table9 : inflate_table;
     return inflateReset(strm);
 }
 
 int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)
 z_streamp strm;
@@ -292,14 +298,21 @@
         /* do this just once */
         virgin = 0;
     }
 #else /* !BUILDFIXED */
 #   include "inffixed.h"
+
+#define lenfix lenfix9
+#define distfix distfix9
+#   include "inffix9.h"
+#undef lenfix
+#undef distfix
+
 #endif /* BUILDFIXED */
-    state->lencode = lenfix;
+    state->lencode = state->wbits == 16 ? lenfix9 : lenfix;
     state->lenbits = 9;
-    state->distcode = distfix;
+    state->distcode = state->wbits == 16 ? distfix9 : distfix;
     state->distbits = 5;
 }
 
 #ifdef MAKEFIXED
 #include <stdio.h>
@@ -901,11 +914,11 @@
             state->ndist = BITS(5) + 1;
             DROPBITS(5);
             state->ncode = BITS(4) + 4;
             DROPBITS(4);
 #ifndef PKZIP_BUG_WORKAROUND
-            if (state->nlen > 286 || state->ndist > 30) {
+            if (state->nlen > 286 || (state->wbits < 16 && state->ndist > 30)) {
                 strm->msg = (char *)"too many length or distance symbols";
                 state->mode = BAD;
                 break;
             }
 #endif
@@ -921,11 +934,11 @@
             while (state->have < 19)
                 state->lens[order[state->have++]] = 0;
             state->next = state->codes;
             state->lencode = (const code FAR *)(state->next);
             state->lenbits = 7;
-            ret = inflate_table(CODES, state->lens, 19, &(state->next),
+            ret = state->inflate_table(CODES, state->lens, 19, &(state->next),
                                 &(state->lenbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid code lengths set";
                 state->mode = BAD;
                 break;
@@ -939,10 +952,11 @@
                     here = state->lencode[BITS(state->lenbits)];
                     if ((unsigned)(here.bits) <= bits) break;
                     PULLBYTE();
                 }
                 if (here.val < 16) {
+                    NEEDBITS(here.bits);
                     DROPBITS(here.bits);
                     state->lens[state->have++] = here.val;
                 }
                 else {
                     if (here.val == 16) {
@@ -995,20 +1009,20 @@
                values here (9 and 6) without reading the comments in inftrees.h
                concerning the ENOUGH constants, which depend on those values */
             state->next = state->codes;
             state->lencode = (const code FAR *)(state->next);
             state->lenbits = 9;
-            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
+            ret = state->inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                 &(state->lenbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid literal/lengths set";
                 state->mode = BAD;
                 break;
             }
             state->distcode = (const code FAR *)(state->next);
             state->distbits = 6;
-            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
+            ret = state->inflate_table(DISTS, state->lens + state->nlen, state->ndist,
                             &(state->next), &(state->distbits), state->work);
             if (ret) {
                 strm->msg = (char *)"invalid distances set";
                 state->mode = BAD;
                 break;
@@ -1017,11 +1031,11 @@
             state->mode = LEN_;
             if (flush == Z_TREES) goto inf_leave;
         case LEN_:
             state->mode = LEN;
         case LEN:
-            if (have >= 6 && left >= 258) {
+            if (state->wbits < 16 && have >= 6 && left >= 258) {
                 RESTORE();
                 inflate_fast(strm, out);
                 LOAD();
                 if (state->mode == TYPE)
                     state->back = -1;
@@ -1063,11 +1077,11 @@
             if (here.op & 64) {
                 strm->msg = (char *)"invalid literal/length code";
                 state->mode = BAD;
                 break;
             }
-            state->extra = (unsigned)(here.op) & 15;
+            state->extra = (unsigned)(here.op) & (state->wbits < 16 ? 15 : 31);
             state->mode = LENEXT;
         case LENEXT:
             if (state->extra) {
                 NEEDBITS(state->extra);
                 state->length += BITS(state->extra);
diff -rPu5 zlib.orig\inflate.h zlib\inflate.h
--- zlib.orig\inflate.h	Sat Dec 26 02:32:08 2009
+++ zlib\inflate.h	Wed May 08 21:15:55 2013
@@ -75,10 +75,14 @@
                 LIT -> LEN
     Process trailer:
         CHECK -> LENGTH -> DONE
  */
 
+typedef int inflate_table_func OF((codetype type, unsigned short FAR *lens,
+                             unsigned codes, code FAR * FAR *table,
+                             unsigned FAR *bits, unsigned short FAR *work));
+
 /* state maintained between inflate() calls.  Approximately 10K bytes. */
 struct inflate_state {
     inflate_mode mode;          /* current inflate mode */
     int last;                   /* true if processing last block */
     int wrap;                   /* bit 0 true for zlib, bit 1 true for gzip */
@@ -117,6 +121,7 @@
     unsigned short work[288];   /* work area for code table building */
     code codes[ENOUGH];         /* space for code tables */
     int sane;                   /* if false, allow invalid distance too far */
     int back;                   /* bits back of last unprocessed length/lit */
     unsigned was;               /* initial length of match */
+    inflate_table_func *inflate_table; /* SumatraPDF: support Deflate64 */
 };
diff -rPu5 zlib.orig\minizip\iowin32.c zlib\minizip\iowin32.c
--- zlib.orig\minizip\iowin32.c	Mon Apr 29 00:57:11 2013
+++ zlib\minizip\iowin32.c	Sat May 11 21:07:57 2013
@@ -25,11 +25,11 @@
 #define INVALID_SET_FILE_POINTER ((DWORD)-1)
 #endif
 
 
 #if defined(WINAPI_FAMILY_PARTITION) && (!(defined(IOWIN32_USING_WINRT_API)))
-#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 #define IOWIN32_USING_WINRT_API 1
 #endif
 #endif
 
 voidpf  ZCALLBACK win32_open_file_func  OF((voidpf opaque, const char* filename, int mode));
@@ -241,11 +241,11 @@
 {
 #ifdef IOWIN32_USING_WINRT_API
     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
 #else
     LONG lHigh = pos.HighPart;
-    DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, FILE_CURRENT);
+    DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, dwMoveMethod);
     BOOL fOk = TRUE;
     if (dwNewPos == 0xFFFFFFFF)
         if (GetLastError() != NO_ERROR)
             fOk = FALSE;
     if ((newPos != NULL) && (fOk))
@@ -368,11 +368,11 @@
 
     if (hFile)
     {
         LARGE_INTEGER pos;
         pos.QuadPart = offset;
-        if (!MySetFilePointerEx(hFile, pos, NULL, FILE_CURRENT))
+        if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))
         {
             DWORD dwErr = GetLastError();
             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;
             ret = -1;
         }
diff -rPu5 zlib.orig\minizip\iowin32s.c zlib\minizip\iowin32s.c
--- zlib.orig\minizip\iowin32s.c	Thu Jan 01 01:00:00 1970
+++ zlib\minizip\iowin32s.c	Sat Jan 21 16:18:29 2012
@@ -0,0 +1,103 @@
+/* Copyright 2012 the SumatraPDF project authors (see AUTHORS file).
+   License: Simplified BSD (see COPYING.BSD) */
+
+#include "zlib.h"
+#include "ioapi.h"
+#define COBJMACROS
+#include "iowin32s.h"
+
+typedef struct {
+    IStream *stream;
+    HRESULT error;
+} Win32sIOState;
+
+uLong ZCALLBACK win32s_read_file_func(voidpf opaque, voidpf stream, void *buf, uLong size)
+{
+    Win32sIOState *state = stream;
+    ULONG cbRead = 0;
+    state->error = IStream_Read(state->stream, buf, size, &cbRead);
+    return cbRead;
+}
+
+uLong ZCALLBACK win32s_write_file_func(voidpf opaque, voidpf stream, const void *buf, uLong size)
+{
+    Win32sIOState *state = stream;
+    ULONG cbWritten = 0;
+    if (!state)
+        return 0;
+    state->error = IStream_Write(state->stream, buf, size, &cbWritten);
+    return cbWritten;
+}
+
+ZPOS64_T ZCALLBACK win32s_tell64_file_func(voidpf opaque, voidpf stream)
+{
+    Win32sIOState *state = stream;
+    ULARGE_INTEGER n;
+    LARGE_INTEGER off;
+    if (!state)
+        return -1;
+    off.QuadPart = 0;
+    n.QuadPart = -1;
+    state->error = IStream_Seek(state->stream, off, STREAM_SEEK_CUR, &n);
+    return n.QuadPart;
+}
+
+long ZCALLBACK win32s_seek64_file_func(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
+{
+    Win32sIOState *state = stream;
+    LARGE_INTEGER off;
+    if (!state)
+        return -1;
+    off.QuadPart = offset;
+    state->error = IStream_Seek(state->stream, off, origin, NULL);
+    return FAILED(state->error);
+}
+
+voidpf ZCALLBACK win32s_open64_file_func(voidpf opaque, const void *stream, int mode)
+{
+    Win32sIOState *state = malloc(sizeof(Win32sIOState));
+    if (!state || !stream)
+    {
+        free(state);
+        return NULL;
+    }
+    state->stream = (IStream *)stream;
+    if (win32s_seek64_file_func(opaque, state, 0, ZLIB_FILEFUNC_SEEK_SET) != 0)
+    {
+        free(state);
+        return NULL;
+    }
+    IStream_AddRef(state->stream);
+    state->error = 0;
+    return state;
+}
+
+int ZCALLBACK win32s_close_file_func(voidpf opaque, voidpf stream)
+{
+    Win32sIOState *state = stream;
+    if (!state)
+        return -1;
+    IStream_Release(state->stream);
+    free(state);
+    return 0;
+}
+
+int ZCALLBACK win32s_error_file_func(voidpf opaque, voidpf stream)
+{
+    Win32sIOState *state = stream;
+    if (!state)
+        return -1;
+    return (int)state->error;
+}
+
+void fill_win32s_filefunc64(zlib_filefunc64_def *pzlib_filefunc_def)
+{
+    pzlib_filefunc_def->zopen64_file = win32s_open64_file_func;
+    pzlib_filefunc_def->zread_file = win32s_read_file_func;
+    pzlib_filefunc_def->zwrite_file = win32s_write_file_func;
+    pzlib_filefunc_def->ztell64_file = win32s_tell64_file_func;
+    pzlib_filefunc_def->zseek64_file = win32s_seek64_file_func;
+    pzlib_filefunc_def->zclose_file = win32s_close_file_func;
+    pzlib_filefunc_def->zerror_file = win32s_error_file_func;
+    pzlib_filefunc_def->opaque = NULL;
+}
diff -rPu5 zlib.orig\minizip\iowin32s.h zlib\minizip\iowin32s.h
--- zlib.orig\minizip\iowin32s.h	Thu Jan 01 01:00:00 1970
+++ zlib\minizip\iowin32s.h	Sat Jan 21 16:18:39 2012
@@ -0,0 +1,14 @@
+/* Copyright 2012 the SumatraPDF project authors (see AUTHORS file).
+   License: Simplified BSD (see COPYING.BSD) */
+
+#include <windows.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void fill_win32s_filefunc64 OF((zlib_filefunc64_def *pzlib_filefunc_def));
+
+#ifdef __cplusplus
+}
+#endif
diff -rPu5 zlib.orig\minizip\unzalloc.c zlib\minizip\unzalloc.c
--- zlib.orig\minizip\unzalloc.c	Thu Jan 01 01:00:00 1970
+++ zlib\minizip\unzalloc.c	Sat Feb 04 07:36:16 2012
@@ -0,0 +1,27 @@
+/* Copyright 2012 the SumatraPDF project authors (see AUTHORS file).
+   License: Simplified BSD (see COPYING.BSD) */
+
+#include "unzalloc.h"
+
+static UnzipAllocFuncs *gAllocFuncs = NULL;
+
+void unzSetAllocFuncs(UnzipAllocFuncs *funcs)
+{
+    gAllocFuncs = funcs;
+}
+
+void *unzAlloc(size_t size)
+{
+    if (gAllocFuncs)
+        return gAllocFuncs->zip_alloc(NULL, 1, size);
+    else
+        return malloc(size);
+}
+
+void unzFree(void *p)
+{
+    if (gAllocFuncs)
+        gAllocFuncs->zip_free(NULL, p);
+    else
+        free(p);
+}
diff -rPu5 zlib.orig\minizip\unzalloc.h zlib\minizip\unzalloc.h
--- zlib.orig\minizip\unzalloc.h	Thu Jan 01 01:00:00 1970
+++ zlib\minizip\unzalloc.h	Sat Feb 04 07:42:30 2012
@@ -0,0 +1,28 @@
+/* Copyright 2012 the SumatraPDF project authors (see AUTHORS file).
+   License: Simplified BSD (see COPYING.BSD) */
+
+#include <stdlib.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* to use a custom allocator, define INC_CUSTOM_ALLOC="unzalloc.h" when
+   compiling zlib and call unzSetAllocFuncs before opening a file */
+
+typedef struct {
+    void* (*zip_alloc)(void *opaque, size_t items, size_t size);
+    void (*zip_free)(void *opaque, void *addr);
+} UnzipAllocFuncs;
+
+void unzSetAllocFuncs(UnzipAllocFuncs *funcs);
+
+void *unzAlloc(size_t size);
+void unzFree(void *p);
+
+#define ALLOC(size) unzAlloc(size)
+#define TRYFREE(p) unzFree(p)
+
+#ifdef __cplusplus
+}
+#endif
diff -rPu5 zlib.orig\minizip\unzip.c zlib\minizip\unzip.c
--- zlib.orig\minizip\unzip.c	Sun Feb 24 09:32:30 2013
+++ zlib\minizip\unzip.c	Wed May 08 21:52:28 2013
@@ -106,10 +106,15 @@
 
 #ifndef UNZ_MAXFILENAMEINZIP
 #define UNZ_MAXFILENAMEINZIP (256)
 #endif
 
+/* SumatraPDF: allow to include a custom allocator */
+#ifdef INC_CUSTOM_ALLOC
+#include INC_CUSTOM_ALLOC
+#endif
+
 #ifndef ALLOC
 # define ALLOC(size) (malloc(size))
 #endif
 #ifndef TRYFREE
 # define TRYFREE(p) {if (p) free(p);}
@@ -712,10 +717,14 @@
         /* total number of entries in the central dir */
         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)
             err=UNZ_ERRNO;
         number_entry_CD = uL;
 
+        /* SumatraPDF: this is a complete guess but it does fix opening a .zip file I had */
+        if (number_entry_CD * 2 == us.gi.number_entry)
+            us.gi.number_entry = number_entry_CD;
+
         if ((number_entry_CD!=us.gi.number_entry) ||
             (number_disk_with_CD!=0) ||
             (number_disk!=0))
             err=UNZ_BADZIPFILE;
 
@@ -1373,10 +1382,15 @@
 /*
 // Unzip Helper Functions - should be here?
 ///////////////////////////////////////////
 */
 
+/* SumatraPDF: allow to include a custom allocator */
+static void *zlib_cust_alloc(voidpf opaque, uInt count, uInt size) { return ALLOC(count * size); }
+static void *bz_cust_alloc(voidpf opaque, int count, int size) { return ALLOC(count * size); }
+static void zlib_bz_cust_free(voidpf opaque, voidpf p) { TRYFREE(p); }
+
 /*
   Read the local header of the current zipfile
   Check the coherency of the local header and info in the end of central
         directory about this file
   store in *piSizeVar the size of extra info in local header
@@ -1424,10 +1438,11 @@
 
     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
 /* #ifdef HAVE_BZIP2 */
                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
 /* #endif */
+                         (s->cur_file_info.compression_method!=Z_DEFLATE64ED) &&
                          (s->cur_file_info.compression_method!=Z_DEFLATED))
         err=UNZ_BADZIPFILE;
 
     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */
         err=UNZ_ERRNO;
@@ -1531,10 +1546,11 @@
 
     if ((s->cur_file_info.compression_method!=0) &&
 /* #ifdef HAVE_BZIP2 */
         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
 /* #endif */
+        (s->cur_file_info.compression_method!=Z_DEFLATE64ED) &&
         (s->cur_file_info.compression_method!=Z_DEFLATED))
 
         err=UNZ_BADZIPFILE;
 
     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;
@@ -1548,17 +1564,19 @@
     pfile_in_zip_read_info->stream.total_out = 0;
 
     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))
     {
 #ifdef HAVE_BZIP2
-      pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
-      pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
+      /* SumatraPDF: allow to include a custom allocator */
+      pfile_in_zip_read_info->bstream.bzalloc = bz_cust_alloc;
+      pfile_in_zip_read_info->bstream.bzfree = zlib_bz_cust_free;
       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
       pfile_in_zip_read_info->bstream.state = (voidpf)0;
 
-      pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
-      pfile_in_zip_read_info->stream.zfree = (free_func)0;
+      /* SumatraPDF: allow to include a custom allocator */
+      pfile_in_zip_read_info->stream.zalloc = zlib_cust_alloc;
+      pfile_in_zip_read_info->stream.zfree = zlib_bz_cust_free;
       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
       pfile_in_zip_read_info->stream.avail_in = 0;
 
       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
@@ -1571,19 +1589,25 @@
       }
 #else
       pfile_in_zip_read_info->raw=1;
 #endif
     }
-    else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))
+    else if (((s->cur_file_info.compression_method==Z_DEFLATED) ||
+              (s->cur_file_info.compression_method==Z_DEFLATE64ED)) && (!raw))
     {
-      pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
-      pfile_in_zip_read_info->stream.zfree = (free_func)0;
+      /* SumatraPDF: allow to include a custom allocator */
+      pfile_in_zip_read_info->stream.zalloc = zlib_cust_alloc;
+      pfile_in_zip_read_info->stream.zfree = zlib_bz_cust_free;
       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
       pfile_in_zip_read_info->stream.next_in = 0;
       pfile_in_zip_read_info->stream.avail_in = 0;
 
-      err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);
+#if MAX_WBITS==16
+#error MAX_WBITS may not be 16 (needed to distinguish Deflate and Deflate64)
+#endif
+      err=inflateInit2(&pfile_in_zip_read_info->stream,
+          (s->cur_file_info.compression_method==Z_DEFLATE64ED)?-16:-MAX_WBITS);
       if (err == Z_OK)
         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;
       else
       {
         TRYFREE(pfile_in_zip_read_info);
diff -rPu5 zlib.orig\minizip\unzip.h zlib\minizip\unzip.h
--- zlib.orig\minizip\unzip.h	Mon Jul 09 01:34:08 2012
+++ zlib\minizip\unzip.h	Wed May 08 21:15:55 2013
@@ -57,10 +57,12 @@
 
 #ifdef HAVE_BZIP2
 #include "bzlib.h"
 #endif
 
+/* SumatraPDF: support Deflate64 */
+#define Z_DEFLATE64ED 9
 #define Z_BZIP2ED 12
 
 #if defined(STRICTUNZIP) || defined(STRICTZIPUNZIP)
 /* like the STRICT of WIN32, we define a pointer that cannot be converted
     from (void*) without cast */
