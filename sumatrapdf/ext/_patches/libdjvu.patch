diff -rPu5 libdjvu.orig\ddjvuapi.cpp libdjvu\ddjvuapi.cpp
--- libdjvu.orig\ddjvuapi.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\ddjvuapi.cpp	Sun Dec 16 16:00:23 2012
@@ -3841,10 +3841,12 @@
             {
               if (file->get_flags() & DjVuFile::STOPPED)
                 return miniexp_status(DDJVU_JOB_STOPPED);
               return miniexp_status(DDJVU_JOB_FAILED);
             }
+          /* SumatraPDF: TODO: how to prevent a potentially infinite loop? */
+          return miniexp_status(DDJVU_JOB_FAILED);
         }
       return miniexp_dummy;
     }
   // Access annotation data
   return get_bytestream_anno(file->get_merged_anno());
diff -rPu5 libdjvu.orig\djvu_all.cpp libdjvu\djvu_all.cpp
--- libdjvu.orig\djvu_all.cpp	Thu Jan 01 01:00:00 1970
+++ libdjvu\djvu_all.cpp	Tue Mar 19 22:09:12 2013
@@ -0,0 +1,44 @@
+#include "Arrays.cpp"
+#include "atomic.cpp"
+#include "BSByteStream.cpp"
+#include "BSEncodeByteStream.cpp"
+#include "ByteStream.cpp"
+#include "DataPool.cpp"
+#include "DjVmDir0.cpp"
+#include "DjVmDoc.cpp"
+#include "DjVmNav.cpp"
+#include "DjVuAnno.cpp"
+#include "DjVuDumpHelper.cpp"
+#include "DjVuErrorList.cpp"
+#include "DjVuFile.cpp"
+#include "DjVuFileCache.cpp"
+#include "DjVuGlobal.cpp"
+#include "DjVuGlobalMemory.cpp"
+#include "DjVuImage.cpp"
+#include "DjVuInfo.cpp"
+#include "DjVuMessage.cpp"
+#include "DjVuNavDir.cpp"
+#include "DjVuPalette.cpp"
+#include "DjVuPort.cpp"
+#include "DjVuText.cpp"
+#include "GBitmap.cpp"
+#include "GContainer.cpp"
+#include "GException.cpp"
+#include "GIFFManager.cpp"
+#include "GOS.cpp"
+#include "GRect.cpp"
+#include "GSmartPointer.cpp"
+#include "GString.cpp"
+#include "GThreads.cpp"
+#include "GUnicode.cpp"
+#include "IFFByteStream.cpp"
+#include "JB2EncodeCodec.cpp"
+#include "DjVmDir.cpp"
+#include "MMRDecoder.cpp"
+#include "MMX.cpp"
+#include "UnicodeByteStream.cpp"
+#include "XMLTags.cpp"
+#include "ZPCodec.cpp"
+#include "ddjvuapi.cpp"
+#include "debug.cpp"
+
diff -rPu5 libdjvu.orig\DjVuGlobal.h libdjvu\DjVuGlobal.h
--- libdjvu.orig\DjVuGlobal.h	Tue May 08 04:56:53 2012
+++ libdjvu\DjVuGlobal.h	Thu Dec 27 14:30:53 2012
@@ -70,11 +70,12 @@
 # include <new>
 #else
 # include <new.h>
 #endif
 
-#ifdef WIN32
+// SumatraPDF: allow to build as a static library (built-in)
+#ifdef WIN32_AND_NOT_STATIC
 # ifdef DLL_EXPORT
 #  define DJVUAPI __declspec(dllexport)
 # else
 #  define DJVUAPI __declspec(dllimport)
 # endif
diff -rPu5 libdjvu.orig\GException.cpp libdjvu\GException.cpp
--- libdjvu.orig\GException.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\GException.cpp	Fri Apr 12 12:21:01 2013
@@ -251,10 +251,12 @@
 
 
 
 // ------ MEMORY MANAGEMENT HANDLER
 
+/* SumatraPDF: prevent exception handler overriding when not building stand-alone libdjvu */
+#ifdef ALLOW_GLOBAL_OOM_HANDLING
 #ifndef NEED_DJVU_MEMORY
 // This is not activated when C++ memory management
 // is overidden.  The overriding functions handle
 // memory exceptions by themselves.
 # if defined(_MSC_VER)
@@ -271,10 +273,11 @@
 static void (*old_handler)() = set_new_handler(throw_memory_error);
 #   endif // HAVE_STDINCLUDES
 #  endif // ! WIN32
 # endif // !_MSC_VER
 #endif // !NEED_DJVU_MEMORY
+#endif
 
 
 #ifdef HAVE_NAMESPACES
 }
 # ifndef NOT_USING_DJVU_NAMESPACE
diff -rPu5 libdjvu.orig\GException.h libdjvu\GException.h
--- libdjvu.orig\GException.h	Tue May 08 04:56:53 2012
+++ libdjvu\GException.h	Fri Apr 12 12:42:24 2013
@@ -310,12 +310,13 @@
 #ifdef __GNUG__
 #define G_THROW_TYPE(msg,xtype) GExceptionHandler::emthrow \
   (GException(msg, __FILE__, __LINE__, __PRETTY_FUNCTION__, xtype)) 
 #define G_EMTHROW(ex) GExceptionHandler::emthrow(ex)
 #else
+// SumatraPDF: don't collect messages, file and line for smaller size
 #define G_THROW_TYPE(m,xtype) GExceptionHandler::emthrow \
-  (GException(m, __FILE__, __LINE__,0, xtype))
+  (GException(0, 0, 0, 0, xtype))
 #define G_EMTHROW(ex) GExceptionHandler::emthrow(ex)
 #endif
 
 #endif // !CPP_SUPPORTS_EXCEPTIONS
 
diff -rPu5 libdjvu.orig\GThreads.h libdjvu\GThreads.h
--- libdjvu.orig\GThreads.h	Tue May 08 04:56:53 2012
+++ libdjvu\GThreads.h	Sat Aug 18 20:17:23 2012
@@ -105,10 +105,13 @@
 #include "GException.h"
 
 #define NOTHREADS     0
 #define POSIXTHREADS  10
 #define WINTHREADS    11
+/* SumatraPDF: prevent these constants from being confused with NOTHREADS */
+#define MACTHREADS    -1
+#define COTHREADS     -1
 
 // Known platforms
 #ifndef THREADMODEL
 #if defined(WIN32)
 #define THREADMODEL WINTHREADS
diff -rPu5 libdjvu.orig\GURL.cpp libdjvu\GURL.cpp
--- libdjvu.orig\GURL.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\GURL.cpp	Sun Dec 16 16:00:23 2012
@@ -482,11 +482,11 @@
 GURL::protocol(const GUTF8String& url)
 {
   const char * const url_ptr=url;
   const char * ptr=url_ptr;
   for(char c=*ptr;
-      c && (isalnum(c) || c == '+' || c == '-' || c == '.');
+      c && (isalnum((unsigned char)c) || c == '+' || c == '-' || c == '.');
       c=*(++ptr)) EMPTY_LOOP;
   if (ptr[0]==colon && ptr[1]=='/' && ptr[2]=='/')
     return GUTF8String(url_ptr, ptr-url_ptr);
   return GUTF8String();
 }
diff -rPu5 libdjvu.orig\miniexp.cpp libdjvu\miniexp.cpp
--- libdjvu.orig\miniexp.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\miniexp.cpp	Fri Apr 12 12:26:15 2013
@@ -899,11 +899,12 @@
 }
 
 int 
 miniexp_stringp(miniexp_t p)
 {
-  return miniexp_isa(p, ministring_t::classname) ? 1 : 0;
+  // SumatraPDF: don't execute code until asked to
+  return miniexp_isa(p, miniexp_symbol("string")) ? 1 : 0;
 }
 
 const char *
 miniexp_to_str(miniexp_t p)
 {
@@ -1333,10 +1334,13 @@
 }
 
 
 /* ---- PNAME */
 
+// SumatraPDF: don't compile as it's not used and it's the only place
+// using try/catch, which is not compatible with compiling as /EHs-c-
+#if 0
 static int
 pname_fputs(miniexp_io_t *io, const char *s)
 {
   char *b = (char*)(io->data[0]);
   size_t l = (size_t)(io->data[2]);
@@ -1380,10 +1384,11 @@
     {
       delete [] (char*)(io.data[0]);
     }
   return r;
 }
+#endif
 
 
 /* ---- INPUT */
 
 static void
diff -rPu5 libdjvu.orig\miniexp.h libdjvu\miniexp.h
--- libdjvu.orig\miniexp.h	Tue May 08 04:56:53 2012
+++ libdjvu\miniexp.h	Sat Aug 18 20:14:08 2012
@@ -679,15 +679,16 @@
   public: static const miniexp_t classname; \
           virtual miniexp_t classof() const; \
           virtual bool isa(miniexp_t) const; 
 
 #define MINIOBJ_IMPLEMENT(cls, supercls, name)\
-  const miniexp_t cls::classname = miniexp_symbol(name);\
+  /* SumatraPDF: don't execute code until asked to */\
+  const miniexp_t cls::classname = 0;\
   miniexp_t cls::classof() const {\
-    return cls::classname; }\
+    return miniexp_symbol(name); }\
   bool cls::isa(miniexp_t n) const {\
-    return (cls::classname==n) || (supercls::isa(n)); }
+    return (classof()==n) || (supercls::isa(n)); }
 
 
 /* miniexp_to_obj --
    Returns a pointer to the object represented by an lisp
    expression. Returns NULL if the expression is not an
