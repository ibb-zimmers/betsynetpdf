// DON'T EDIT MANUALLY !!!!
// auto-generated by gen_settings_txt.py !!!!

#include "BaseUtil.h"
#include "SerializeTxt.h"
#include "SettingsTxtSimple.h"

namespace sertxt {

#define of offsetof
const FieldMetadata gSimpleXYFieldMetadata[] = {
    { of(SimpleXY, x), TYPE_I32, (uintptr_t)33 },
    { of(SimpleXY, y), TYPE_I32, (uintptr_t)12 },
};

const StructMetadata gSimpleXYMetadata = {
    sizeof(SimpleXY),
    2,
    "x\0y\0\0",
    &gSimpleXYFieldMetadata[0]
};

const FieldMetadata gSimpleFieldMetadata[] = {
    { of(Simple, bTrue),      TYPE_BOOL,       (uintptr_t)1                  },
    { of(Simple, bFalse),     TYPE_BOOL,       (uintptr_t)0                  },
    { of(Simple, u16_1),      TYPE_U16,        (uintptr_t)1                  },
    { of(Simple, i32_1),      TYPE_I32,        (uintptr_t)-12                },
    { of(Simple, u32_1),      TYPE_U32,        (uintptr_t)89                 },
    { of(Simple, u64_1),      TYPE_U64,        (uintptr_t)123                },
    { of(Simple, col_1),      TYPE_COLOR,      (uintptr_t)0xacff00ed         },
    { of(Simple, float_1),    TYPE_FLOAT,      (uintptr_t)"3.12348"          },
    { of(Simple, xy1),        TYPE_STRUCT_PTR, (uintptr_t)&gSimpleXYMetadata },
    { of(Simple, str_1),      TYPE_STR,        NULL                          },
    { of(Simple, str_escape), TYPE_STR,        NULL                          },
    { of(Simple, xy2),        TYPE_STRUCT_PTR, (uintptr_t)&gSimpleXYMetadata },
    { of(Simple, wstr_1),     TYPE_WSTR,       NULL                          },
};

const StructMetadata gSimpleMetadata = {
    sizeof(Simple),
    13,
    "b_true\0b_false\0u16_1\0i32_1\0u32_1\0u64_1\0col_1\0float_1\0xy1\0str_1\0str_escape\0xy2\0wstr_1\0\0",
    &gSimpleFieldMetadata[0]
};

#undef of

Simple *DeserializeSimple(const char *data, size_t dataLen)
{
    return DeserializeSimpleWithDefault(data, dataLen, NULL, 0);
}

Simple *DeserializeSimpleWithDefault(const char *data, size_t dataLen, const char *defaultData, size_t defaultDataLen)
{
    char *dataCopy = str::DupN(data, dataLen);
    char *defaultDataCopy = str::DupN(defaultData, defaultDataLen);
    void *res = DeserializeWithDefault(dataCopy, dataLen, defaultDataCopy, defaultDataLen, &gSimpleMetadata);
    free(dataCopy);
    free(defaultDataCopy);
    return (Simple*)res;
}

uint8_t *SerializeSimple(Simple *val, size_t *dataLenOut)
{
    return Serialize((const uint8_t*)val, &gSimpleMetadata, dataLenOut);
}

void FreeSimple(Simple *val)
{
    FreeStruct((uint8_t*)val, &gSimpleMetadata);
}

} // namespace sertxt
