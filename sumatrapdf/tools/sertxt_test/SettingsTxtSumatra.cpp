// DON'T EDIT MANUALLY !!!!
// auto-generated by gen_settings_txt.py !!!!

#include "BaseUtil.h"
#include "SerializeTxt.h"
#include "SettingsTxtSumatra.h"

namespace sertxt {

#define of offsetof
const FieldMetadata gRectIntFieldMetadata[] = {
    { of(RectInt, x),  TYPE_I32, (uintptr_t)0 },
    { of(RectInt, y),  TYPE_I32, (uintptr_t)0 },
    { of(RectInt, dx), TYPE_I32, (uintptr_t)0 },
    { of(RectInt, dy), TYPE_I32, (uintptr_t)0 },
};

const StructMetadata gRectIntMetadata = {
    sizeof(RectInt),
    4,
    "x\0y\0dx\0dy\0\0",
    &gRectIntFieldMetadata[0]
};

const FieldMetadata gBasicSettingsFieldMetadata[] = {
    { of(BasicSettings, globalPrefsOnly),      TYPE_BOOL,                                         (uintptr_t)0                 },
    { of(BasicSettings, currLanguage),         TYPE_STR,                                          NULL                         },
    { of(BasicSettings, toolbarVisible),       TYPE_BOOL,                                         (uintptr_t)1                 },
    { of(BasicSettings, pdfAssociateDontAsk),  TYPE_BOOL,                                         (uintptr_t)0                 },
    { of(BasicSettings, pdfAssociateDoIt),     TYPE_BOOL,                                         (uintptr_t)0                 },
    { of(BasicSettings, checkForUpdates),      TYPE_BOOL,                                         (uintptr_t)1                 },
    { of(BasicSettings, rememberMruFiles),     TYPE_BOOL,                                         (uintptr_t)1                 },
    { of(BasicSettings, useSystemColorScheme), TYPE_BOOL,                                         (uintptr_t)0                 },
    { of(BasicSettings, inverseSearchCmdLine), TYPE_WSTR,                                         NULL                         },
    { of(BasicSettings, versionToSkip),        TYPE_STR,                                          NULL                         },
    { of(BasicSettings, lastUpdateTime),       TYPE_STR,                                          NULL                         },
    { of(BasicSettings, defaultDisplayMode),   TYPE_U16,                                          (uintptr_t)0                 },
    { of(BasicSettings, defaultZoom),          TYPE_FLOAT,                                        (uintptr_t)"-1"              },
    { of(BasicSettings, windowState),          TYPE_I32,                                          (uintptr_t)1                 },
    { of(BasicSettings, windowPos),            (Type)(TYPE_STRUCT_PTR | TYPE_STORE_COMPACT_MASK), (uintptr_t)&gRectIntMetadata },
    { of(BasicSettings, tocVisible),           TYPE_BOOL,                                         (uintptr_t)1                 },
    { of(BasicSettings, favVisible),           TYPE_BOOL,                                         (uintptr_t)0                 },
    { of(BasicSettings, sidebarDx),            TYPE_I32,                                          (uintptr_t)0                 },
    { of(BasicSettings, tocDy),                TYPE_I32,                                          (uintptr_t)0                 },
    { of(BasicSettings, showStartPage),        TYPE_BOOL,                                         (uintptr_t)1                 },
    { of(BasicSettings, openCountWeek),        TYPE_I32,                                          (uintptr_t)0                 },
    { of(BasicSettings, lastPrefUpdate),       TYPE_U64,                                          (uintptr_t)0                 },
};

const StructMetadata gBasicSettingsMetadata = {
    sizeof(BasicSettings),
    22,
    "global_prefs_only\0curr_language\0toolbar_visible\0pdf_associate_dont_ask\0pdf_associate_do_it\0check_for_updates\0remember_mru_files\0use_system_color_scheme\0inverse_search_cmd_line\0version_to_skip\0last_update_time\0default_display_mode\0default_zoom\0window_state\0window_pos\0toc_visible\0fav_visible\0sidebar_dx\0toc_dy\0show_start_page\0open_count_week\0last_pref_update\0\0",
    &gBasicSettingsFieldMetadata[0]
};

const FieldMetadata gPaddingSettingsFieldMetadata[] = {
    { of(PaddingSettings, top),    TYPE_U16, (uintptr_t)2 },
    { of(PaddingSettings, bottom), TYPE_U16, (uintptr_t)2 },
    { of(PaddingSettings, left),   TYPE_U16, (uintptr_t)4 },
    { of(PaddingSettings, right),  TYPE_U16, (uintptr_t)4 },
    { of(PaddingSettings, spaceX), TYPE_U16, (uintptr_t)4 },
    { of(PaddingSettings, spaceY), TYPE_U16, (uintptr_t)4 },
};

const StructMetadata gPaddingSettingsMetadata = {
    sizeof(PaddingSettings),
    6,
    "top\0bottom\0left\0right\0space_x\0space_y\0\0",
    &gPaddingSettingsFieldMetadata[0]
};

const FieldMetadata gForwardSearchFieldMetadata[] = {
    { of(ForwardSearch, highlightOffset),       TYPE_I32,   (uintptr_t)0        },
    { of(ForwardSearch, highlightWidth),        TYPE_I32,   (uintptr_t)15       },
    { of(ForwardSearch, highlightPermanent),    TYPE_I32,   (uintptr_t)0        },
    { of(ForwardSearch, highlightColor),        TYPE_COLOR, (uintptr_t)0x6581ff },
    { of(ForwardSearch, enableTexEnhancements), TYPE_BOOL,  (uintptr_t)0        },
};

const StructMetadata gForwardSearchMetadata = {
    sizeof(ForwardSearch),
    5,
    "highlight_offset\0highlight_width\0highlight_permanent\0highlight_color\0enable_tex_enhancements\0\0",
    &gForwardSearchFieldMetadata[0]
};

const FieldMetadata gAdvancedSettingsFieldMetadata[] = {
    { of(AdvancedSettings, traditionalEbookUI),   TYPE_BOOL,       (uintptr_t)1                         },
    { of(AdvancedSettings, escToExit),            TYPE_BOOL,       (uintptr_t)0                         },
    { of(AdvancedSettings, textColor),            TYPE_COLOR,      (uintptr_t)0x000000                  },
    { of(AdvancedSettings, pageColor),            TYPE_COLOR,      (uintptr_t)0xffffff                  },
    { of(AdvancedSettings, mainWindowBackground), TYPE_COLOR,      (uintptr_t)0xfff200                  },
    { of(AdvancedSettings, pagePadding),          TYPE_STRUCT_PTR, (uintptr_t)&gPaddingSettingsMetadata },
    { of(AdvancedSettings, forwardSearch),        TYPE_STRUCT_PTR, (uintptr_t)&gForwardSearchMetadata   },
};

const StructMetadata gAdvancedSettingsMetadata = {
    sizeof(AdvancedSettings),
    7,
    "traditional_ebook_ui\0esc_to_exit\0text_color\0page_color\0main_window_background\0page_padding\0forward_search\0\0",
    &gAdvancedSettingsFieldMetadata[0]
};

const FieldMetadata gFavFieldMetadata[] = {
    { of(Fav, name),      TYPE_STR,                              NULL         },
    { of(Fav, pageNo),    TYPE_I32,                              (uintptr_t)0 },
    { of(Fav, pageLabel), TYPE_STR,                              NULL         },
    { of(Fav, menuId),    (Type)(TYPE_I32 | TYPE_NO_STORE_MASK), (uintptr_t)0 },
};

const StructMetadata gFavMetadata = {
    sizeof(Fav),
    4,
    "name\0page_no\0page_label\0menu_id\0\0",
    &gFavFieldMetadata[0]
};

const FieldMetadata gAppStateFieldMetadata[] = {
    { of(AppState, favorites), TYPE_ARRAY, (uintptr_t)&gFavMetadata },
};

const StructMetadata gAppStateMetadata = {
    sizeof(AppState),
    1,
    "favorites\0\0",
    &gAppStateFieldMetadata[0]
};

const FieldMetadata gSettingsFieldMetadata[] = {
    { of(Settings, basic),           TYPE_STRUCT_PTR, (uintptr_t)&gBasicSettingsMetadata    },
    { of(Settings, advanced),        TYPE_STRUCT_PTR, (uintptr_t)&gAdvancedSettingsMetadata },
    { of(Settings, appState),        TYPE_STRUCT_PTR, (uintptr_t)&gAppStateMetadata         },
    { of(Settings, str_escape_test), TYPE_STR,        NULL                                  },
    { of(Settings, wstr_1),          TYPE_WSTR,       NULL                                  },
};

const StructMetadata gSettingsMetadata = {
    sizeof(Settings),
    5,
    "basic\0advanced\0app_state\0str_escape_test\0wstr_1\0\0",
    &gSettingsFieldMetadata[0]
};

#undef of

Settings *DeserializeSettings(const char *data, size_t dataLen)
{
    return DeserializeSettingsWithDefault(data, dataLen, NULL, 0);
}

Settings *DeserializeSettingsWithDefault(const char *data, size_t dataLen, const char *defaultData, size_t defaultDataLen)
{
    char *dataCopy = str::DupN(data, dataLen);
    char *defaultDataCopy = str::DupN(defaultData, defaultDataLen);
    void *res = DeserializeWithDefault(dataCopy, dataLen, defaultDataCopy, defaultDataLen, &gSettingsMetadata);
    free(dataCopy);
    free(defaultDataCopy);
    return (Settings*)res;
}

uint8_t *SerializeSettings(Settings *val, size_t *dataLenOut)
{
    return Serialize((const uint8_t*)val, &gSettingsMetadata, dataLenOut);
}

void FreeSettings(Settings *val)
{
    FreeStruct((uint8_t*)val, &gSettingsMetadata);
}

} // namespace sertxt
