Index: ext/makefile.msvc
===================================================================
--- ext/makefile.msvc	(revision 25)
+++ ext/makefile.msvc	(working copy)
@@ -4,13 +4,22 @@
 !error Include mupdf\makefile.msvc first (or build ..\makefile.msvc instead)
 !endif
 
-OE = $(O)\ext
-OBZ= $(O)\bzip2
-OR = $(O)\unrar
-ODV= $(O)\djvu
-OC = $(O)\chmlib
-OLZ= $(O)\lzma
+OE = $(O)\ext-x86
+OBZ= $(O)\bzip2-x86
+OR = $(O)\unrar-x86
+ODV= $(O)\djvu-x86
+OC = $(O)\chmlib-x86
+OLZ= $(O)\lzma-x86
 
+!if "$(PLATFORM)"=="X64"
+OE = $(O)\ext-x64
+OBZ= $(O)\bzip2-x64
+OR = $(O)\unrar-x64
+ODV= $(O)\djvu-x64
+OC = $(O)\chmlib-x64
+OLZ= $(O)\lzma-x64
+!endif
+
 SYNCTEX_CFLAGS = $(CFLAGS) /TC /I$(EXTDIR)/synctex /I$(ZLIB_DIR) /wd4244 /wd4702 /wd4706 /wd4996
 !if "$(PLATFORM)"=="X64"
 SYNCTEX_CFLAGS = $(SYNCTEX_CFLAGS) /wd4267
Index: makefile.msvc
===================================================================
--- makefile.msvc	(revision 25)
+++ makefile.msvc	(working copy)
@@ -22,12 +22,12 @@
 !endif
 
 # O is directory where object and binary files go
-O = $(BASEDIR)\obj-$(CFG)
+O = $(BASEDIR)\..\bin\$(CFG)
 
 # for x86 : obj-dbg and obj-rel ; for x64 : obj-dbg64 and obj-rel64
-!if "$(PLATFORM)"=="X64"
-O = $(BASEDIR)\$(O)64
-!endif
+# !if "$(PLATFORM)"=="X64"
+# O = $(O)64
+# !endif
 
 !if "$(MUPDF_DIR)"==""
 MUPDF_DIR=$(BASEDIR)\mupdf
@@ -38,7 +38,7 @@
 !endif
 
 # default target
-all_sumatrapdf: SumatraPDF Uninstaller PDFFilter PdfPreview BrowserPlugin EngineDump
+all_sumatrapdf: SumatraPDF
 
 ##### add configuration changes that should also affect MuPDF before this line #####
 
@@ -103,51 +103,54 @@
 	ole32.lib OleAut32.lib shlwapi.lib version.lib \
 	WindowsCodecs.lib DbgHelp.lib
 
-OS   = $(O)\sumatrapdf
-OU   = $(O)\utils
-ODLL = $(O)\applibs
-OMUI = $(O)\mui
-OM   = $(O)\memtrace
-OUIA = $(O)\uia
+OS   = $(O)\sumatrapdf-x86
+OU   = $(O)\utils-x86
+ODLL = $(O)\applibs-x86
+OMUI = $(O)\mui-x86
+OM   = $(O)\memtrace-x86
+OUIA = $(O)\uia-x86
 
-SUMATRA_APP = $(O)\SumatraPDF.exe
-SUMATRA_APP_NO_MUPDF = $(O)\SumatraPDF-no-MuPDF.exe
+!if "$(PLATFORM)"=="X64"
+OS   = $(O)\sumatrapdf-x64
+OU   = $(O)\utils-x64
+ODLL = $(O)\applibs-x64
+OMUI = $(O)\mui-x64
+OM   = $(O)\memtrace-x64
+OUIA = $(O)\uia-x64
+!endif
+
+SUMATRA_APP = $(O)\SumatraPDF-x86.exe
+SUMATRA_DLL = $(O)\SumatraPDF-x86.dll
 SUMATRA_RES = $(OS)\sumatrapdf.res
 
-INSTALLER_APP   = $(O)\Installer.exe
-INSTALLER_RES   = $(OS)\Installer.res
-UNINSTALLER_APP = $(O)\uninstall.exe
-UNINSTALLER_RES = $(OS)\Uninstaller.res
+!if "$(PLATFORM)"=="X64"
+SUMATRA_APP = $(O)\SumatraPDF-x64.exe
+SUMATRA_DLL = $(O)\SumatraPDF-x64.dll
+!endif
 
-PDFFILTER_DLL = $(O)\PdfFilter.dll
-PDFFILTER_RES = $(ODLL)\PdfFilter.res
-PDFFILTER_CFLAGS = $(SUMATRA_CFLAGS)
-
-LIBMUPDF_LIB = $(O)\libmupdf.lib
+LIBMUPDF_LIB = $(O)\libmupdf-x86.lib
 LIBMUPDF_DEF = $(SRCDIR)\libmupdf.def
-LIBMUPDF_DLL = $(O)\libmupdf.dll
-LIBMUPDF_RES = $(O)\libmupdf.res
+LIBMUPDF_DLL = $(O)\libmupdf-x86.dll
+LIBMUPDF_RES = $(O)\libmupdf-x86.res
 
-PDFPREVIEW_DLL = $(O)\PdfPreview.dll
-PDFPREVIEW_RES = $(ODLL)\PdfPreview.res
-PDFPREVIEW_CFLAGS = $(SUMATRA_CFLAGS)
+MUPDF_LIB   = $(O)\libmupdfs-x86.lib
+UTILS_LIB   = $(O)\utils-x86.lib
+MUI_LIB     = $(O)\mui-x86.lib
+ENGINES_LIB = $(O)\engines-x86.lib
+MAIN_UI_LIB = $(O)\sumatra-x86.lib
 
-MEMTRACE_DLL = $(O)\memtrace.dll
-MEMTRACE_RES = $(ODLL)\memtrace.res
-MEMTRACE_CFLAGS = $(SUMATRA_CFLAGS)
+!if "$(PLATFORM)"=="X64"
+LIBMUPDF_LIB = $(O)\libmupdf-x64.lib
+LIBMUPDF_DLL = $(O)\libmupdf-x64.dll
+LIBMUPDF_RES = $(O)\libmupdf-x64.res
 
-BROWSER_PLUGIN = $(O)\npPdfViewer.dll
-BROWSER_PLUGIN_RES = $(ODLL)\npPdfViewer.res
-BROWSER_PLUGIN_CFLAGS = $(CFLAGS) /I$(SRCDIR)/utils
+MUPDF_LIB   = $(O)\libmupdfs-x64.lib
+UTILS_LIB   = $(O)\utils-x64.lib
+MUI_LIB     = $(O)\mui-x64.lib
+ENGINES_LIB = $(O)\engines-x64.lib
+MAIN_UI_LIB = $(O)\sumatra-x64.lib
+!endif
 
-ENGINEDUMP_APP = $(O)\EngineDump.exe
-
-MUPDF_LIB   = $(O)\libmupdfs.lib
-UTILS_LIB   = $(O)\utils.lib
-MUI_LIB     = $(O)\mui.lib
-ENGINES_LIB = $(O)\engines.lib
-MAIN_UI_LIB = $(O)\sumatra.lib
-
 UTILS_OBJS = \
 	$(OU)\BencUtil.obj $(OU)\FileUtil.obj $(OU)\HttpUtil.obj \
 	$(OU)\StrUtil.obj $(OU)\UtilTests.obj $(OU)\WinUtil.obj \
@@ -267,16 +270,7 @@
 cleanall: force
 	-rmdir /S /Q obj-dbg obj-rel
 
-SumatraPDF:    $(OS) $(LIBMUPDF_DLL) $(SUMATRA_APP) $(SUMATRA_APP_NO_MUPDF)
-Installer:     $(OS) $(INSTALLER_APP)
-Uninstaller:   $(OS) $(UNINSTALLER_APP)
-PDFFilter:     $(OS) $(LIBMUPDF_DLL) $(PDFFILTER_DLL)
-PdfPreview:    $(OS) $(LIBMUPDF_DLL) $(PDFPREVIEW_DLL)
-BrowserPlugin: $(OS) $(BROWSER_PLUGIN)
-EngineDump:    $(OS) $(ENGINEDUMP_APP)
-memtrace:      $(OS) $(MEMTRACE_DLL)
-mudraw:        $(O)  $(MUDRAW_APP)
-mutool:        $(O)  $(MUTOOL_APP)
+SumatraPDF:    $(OS) $(LIBMUPDF_DLL) $(SUMATRA_APP) $(SUMATRA_DLL)
 
 $(OS): $(O) $(OE)
 	@if not exist $(OS) mkdir $(OS)
@@ -290,10 +284,10 @@
 	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\SumatraPDF.rc
 
 $(SUMATRA_APP): $(SUMATRA_OBJS) $(MUPDF_LIB)
-	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
+	$(LD) $(LDFLAGS) $** $(LIBS) /OUT:$@
 
-$(SUMATRA_APP_NO_MUPDF): $(SUMATRA_OBJS) $(OS)\MuPDF_Exports.obj
-	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ $(LIBMUPDF_LIB)
+$(SUMATRA_DLL): $(SUMATRA_OBJS) $(MUPDF_LIB)
+	$(LD) $(LDFLAGS) $** $(LIBS) /DLL /OUT:$@
 
 $(LIBMUPDF_RES): $(SRCDIR)\libmupdf.rc $(SRCDIR)\Version.h
 	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\libmupdf.rc
@@ -301,49 +295,6 @@
 $(LIBMUPDF_DLL): $(MUPDF_LIB) $(LIBMUPDF_RES) $(LIBMUPDF_DEF)
 	$(LD) /DLL $(LDFLAGS) $(MUPDF_LIB) $(LIBMUPDF_RES) $(LIBS) /DEF:$(LIBMUPDF_DEF) /IMPLIB:$(LIBMUPDF_LIB) /PDB:$*.pdb /OUT:$@
 
-$(O)\InstallerData.dat:
-	echo Use scripts\build.py for creating the file $@
-	echo. > $@
-
-$(INSTALLER_RES): $(SRCDIR)\installer\Installer.rc $(SRCDIR)\installer\Resource.h $(SRCDIR)\Version.h $(O)\InstallerData.dat
-	rc /r /fo$@ $(RC_FLAGS) /D "INSTALL_PAYLOAD_ZIP=..\..\$(O)\InstallerData.dat" $(SRCDIR)\installer\Installer.rc
-
-$(UNINSTALLER_RES): $(SRCDIR)\installer\Installer.rc $(SRCDIR)\installer\Resource.h $(SRCDIR)\Version.h
-	rc /r /fo$@ $(RC_FLAGS) /D "BUILD_UNINSTALLER" $(SRCDIR)\installer\Installer.rc
-
-$(INSTALLER_APP): $(INSTALLER_OBJS)
-	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(UNINSTALLER_APP): $(UNINSTALLER_OBJS)
-	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(PDFFILTER_RES): $(SRCDIR)\ifilter\PdfFilter.rc $(SRCDIR)\Version.h
-	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\ifilter\PdfFilter.rc
-
-$(PDFFILTER_DLL): $(PDFFILTER_OBJS)
-	$(LD) /DLL $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(PDFPREVIEW_RES): $(SRCDIR)\previewer\PdfPreview.rc $(SRCDIR)\Version.h
-	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\previewer\PdfPreview.rc
-
-$(PDFPREVIEW_DLL): $(PDFPREVIEW_OBJS)
-	$(LD) /DLL $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(MEMTRACE_RES): $(SRCDIR)\memtrace\MemTrace.rc
-	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\memtrace\MemTrace.rc
-
-$(MEMTRACE_DLL): $(MEMTRACE_OBJS)
-	$(LD) /DLL $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(BROWSER_PLUGIN_RES): $(SRCDIR)\browserplugin\npPdfViewer.rc $(SRCDIR)\Version.h
-	rc /r /fo$@ $(RC_FLAGS) $(SRCDIR)\browserplugin\npPdfViewer.rc
-
-$(BROWSER_PLUGIN): $(BROWSER_PLUGIN_OBJS)
-	$(LD) /DLL $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@
-
-$(ENGINEDUMP_APP): $(ENGINEDUMP_OBJS)
-	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ /SUBSYSTEM:CONSOLE
-
 {$(SRCDIR)\utils}.cpp{$(OU)}.obj::
 	$(CC) $(UTILS_CFLAGS) /Fo$(OU)\ /Fd$(O)\vc80.pdb $<
 
Index: mupdf/makefile.msvc
===================================================================
--- mupdf/makefile.msvc	(revision 25)
+++ mupdf/makefile.msvc	(working copy)
@@ -24,16 +24,28 @@
 !endif
 !endif
 
-OZ  = $(O)\zlib
-OFT = $(O)\freetype
-OT  = $(O)\jpegturbo
-OOJ = $(O)\openjpeg
-OJB = $(O)\jbig2
-OFZ = $(O)\fitz
-OP  = $(O)\mupdf
-OX  = $(O)\muxps
-OA  = $(O)\muapps
+OZ  = $(O)\zlib-x86
+OFT = $(O)\freetype-x86
+OT  = $(O)\jpegturbo-x86
+OOJ = $(O)\openjpeg-x86
+OJB = $(O)\jbig2-x86
+OFZ = $(O)\fitz-x86
+OP  = $(O)\mupdf-x86
+OX  = $(O)\muxps-x86
+OA  = $(O)\muapps-x86
 
+!if "$(PLATFORM)"=="X64"
+OZ  = $(O)\zlib-x64
+OFT = $(O)\freetype-x64
+OT  = $(O)\jpegturbo-x64
+OOJ = $(O)\openjpeg-x64
+OJB = $(O)\jbig2-x64
+OFZ = $(O)\fitz-x64
+OP  = $(O)\mupdf-x64
+OX  = $(O)\muxps-x64
+OA  = $(O)\muapps-x64
+!endif
+
 # To over-ride location of fitz/mupdf sources, define MUPDF_DIR
 # e.g.:
 #MUPDF_DIR=..\mupdf
@@ -78,7 +90,7 @@
 # /Gy  : separate functions for linker
 # /GF  : enable read-only string pooling
 # /MP  : use muliple processors to speed up compilation
-CFLAGSB = $(CFLAGSB) /WX /GR- /Zi /GS /Gy /GF /MP
+CFLAGSB = $(CFLAGSB) /GR- /Zi /GS /Gy /GF /MP
 
 # on 64-bit SSE2 is always used, so no need to specify it
 !if "$(PLATFORM)"!="X64" && "$(WITHOUT_ARCH_SSE2)"==""
Index: src/DisplayModel.cpp
===================================================================
--- src/DisplayModel.cpp	(revision 25)
+++ src/DisplayModel.cpp	(working copy)
@@ -194,6 +194,8 @@
 {
     CrashIf(!engine || engine->PageCount() <= 0);
 
+	this->deactivateTextSelection = false;
+
     if (!engine->IsImageCollection()) {
         windowMargin = gGlobalPrefs->fixedPageUI.windowMargin;
         pageSpacing = gGlobalPrefs->fixedPageUI.pageSpacing;
@@ -869,6 +871,9 @@
 // note: returns false for pages that haven't been rendered yet
 bool DisplayModel::IsOverText(PointI pt)
 {
+	if(this->deactivateTextSelection)
+		return false;
+
     int pageNo = GetPageNoByPoint(pt);
     if (!ValidPageNo(pageNo))
         return false;
Index: src/DisplayModel.h
===================================================================
--- src/DisplayModel.h	(revision 25)
+++ src/DisplayModel.h	(working copy)
@@ -92,6 +92,8 @@
     void ChangeDisplayMode(DisplayMode newDisplayMode);
     void SetPresentationMode(bool enable);
 
+	bool deactivateTextSelection;
+
     /* a "virtual" zoom level. Can be either a real zoom level in percent
        (i.e. 100.0 is original size) or one of virtual values ZOOM_FIT_PAGE,
        ZOOM_FIT_WIDTH or ZOOM_FIT_CONTENT, whose real value depends on draw area size */
Index: src/Menu.cpp
===================================================================
--- src/Menu.cpp	(revision 25)
+++ src/Menu.cpp	(working copy)
@@ -529,6 +529,13 @@
     if (!win->IsDocLoaded())
         return;
 
+	SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win->sumatraNetApi;
+	if(sumatraNetApi && sumatraNetApi->useExternContextMenu)
+	{
+		sumatraNetApi->CheckOnRequestContextMenu(win, x, y);
+		return;
+	}
+
     PageElement *pageEl = win->dm->GetElementAtPos(PointI(x, y));
     ScopedMem<WCHAR> value(pageEl ? pageEl->GetValue() : NULL);
     CrashIf(value && !pageEl);
Index: src/Print.cpp
===================================================================
--- src/Print.cpp	(revision 25)
+++ src/Print.cpp	(working copy)
@@ -304,7 +304,8 @@
 
             bool ok = false;
             if (!pd.advData.asImage) {
-                RectI rc = RectI::FromXY(offset.x, offset.y, paperSize.dx, paperSize.dy);
+                /*RectI rc = RectI::FromXY(offset.x, offset.y, paperSize.dx, paperSize.dy);*/
+				RectI rc = RectI::FromXY(printable.x, printable.y, (int)(pSize.dx * zoom), (int)(pSize.dy * zoom));
                 ok = engine.RenderPage(hdc, rc, pageNo, zoom, rotation, NULL, Target_Print, abortCookie ? &abortCookie->cookie : NULL);
                 if (abortCookie)
                     abortCookie->Clear();
Index: src/SumatraAbout.cpp
===================================================================
--- src/SumatraAbout.cpp	(revision 25)
+++ src/SumatraAbout.cpp	(working copy)
@@ -713,6 +713,7 @@
 // TODO: create in TEMP directory instead?
 static WCHAR *GetThumbnailPath(const WCHAR *filePath)
 {
+	return NULL;
     // create a fingerprint of a (normalized) path for the file name
     // I'd have liked to also include the file's last modification time
     // in the fingerprint (much quicker than hashing the entire file's
@@ -735,6 +736,8 @@
 // removes thumbnails that don't belong to any frequently used item in file history
 void CleanUpThumbnailCache(FileHistory& fileHistory)
 {
+	return;
+
     ScopedMem<WCHAR> thumbsPath(AppGenDataFilename(THUMBNAILS_DIR_NAME));
     if (!thumbsPath)
         return;
Index: src/SumatraPDF.cpp
===================================================================
--- src/SumatraPDF.cpp	(revision 25)
+++ src/SumatraPDF.cpp	(working copy)
@@ -5,6 +5,7 @@
 #include "SumatraPDF.h"
 #include <malloc.h>
 #include <wininet.h>
+#include <sstream>
 
 #include "AppPrefs.h"
 #include "AppTools.h"
@@ -15,19 +16,19 @@
 #include "EbookController.h"
 #include "EbookWindow.h"
 #include "ExternalPdfViewer.h"
-#include "FileHistory.h"
+//#include "FileHistory.h"
 #include "FileModifications.h"
 #include "Favorites.h"
 #include "FileUtil.h"
 #include "FileWatcher.h"
-using namespace Gdiplus;
-#include "GdiPlusUtil.h"
+//using namespace Gdiplus;
+//#include "GdiPlusUtil.h"
 #include "HttpUtil.h"
 #include "HtmlWindow.h"
 #include "Menu.h"
 #include "Mui.h"
 #include "Notifications.h"
-#include "ParseCommandLine.h"
+//#include "ParseCommandLine.h"
 #include "PdfEngine.h"
 #include "PdfSync.h"
 #include "Print.h"
@@ -48,13 +49,15 @@
 #include "ThreadUtil.h"
 #include "Toolbar.h"
 #include "Touch.h"
-#include "Translations.h"
+//#include "Translations.h"
 #include "uia/Provider.h"
 #include "UITask.h"
 #include "Version.h"
 #include "WindowInfo.h"
 #include "WinUtil.h"
 
+HANDLE hInst;
+
 /* if true, we're in debug mode where we show links as blue rectangle on
    the screen. Makes debugging code related to links easier. */
 #ifdef DEBUG
@@ -2124,6 +2127,13 @@
         else
             renderDelay = gRenderCache.Paint(hdc, bounds, dm, pageNo, pageInfo, &renderOutOfDateCue);
 
+		SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+		if(sumatraNetApi != NULL)
+		{
+			sumatraNetApi->DrawOverlayObjets(&hdc, &win, pageNo, bounds);
+			sumatraNetApi->DrawLine(&hdc, &win);
+		}
+
         if (renderDelay) {
             ScopedFont fontRightTxt(GetSimpleFont(hdc, L"MS Shell Dlg", 14));
             HGDIOBJ hPrevFont = SelectObject(hdc, fontRightTxt);
@@ -2132,7 +2142,10 @@
                 if (renderDelay < REPAINT_MESSAGE_DELAY_IN_MS)
                     win.RepaintAsync(REPAINT_MESSAGE_DELAY_IN_MS / 4);
                 else
+				{
                     DrawCenteredText(hdc, bounds, _TR("Please wait - rendering..."), IsUIRightToLeft());
+					win.RepaintAsync(REPAINT_MESSAGE_DELAY_IN_MS / 4);
+				}
                 rendering = true;
             } else {
                 DrawCenteredText(hdc, bounds, _TR("Couldn't render the page"), IsUIRightToLeft());
@@ -2227,7 +2240,11 @@
         return;
 
     SizeI drag(x - win.dragPrevPos.x, y - win.dragPrevPos.y);
-    win.MoveDocBy(drag.dx, -2 * drag.dy);
+    SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+	if(sumatraNetApi != NULL && sumatraNetApi->hitLabelForDragging)
+		sumatraNetApi->MoveSelectedOverlayObjectsBy(&win, x, y);
+	else
+		win.MoveDocBy(drag.dx, -2 * drag.dy);
 }
 
 static void OnMouseMove(WindowInfo& win, int x, int y, WPARAM flags)
@@ -2259,6 +2276,7 @@
     }
 
     SizeI drag;
+	SumatraNetUnmanagedApi* sumatraNetApi;
     switch (win.mouseAction) {
     case MA_SCROLLING:
         win.yScrollSpeed = (y - win.dragStart.y) / SMOOTHSCROLL_SLOW_DOWN_FACTOR;
@@ -2277,8 +2295,21 @@
     case MA_DRAGGING:
     case MA_DRAGGING_RIGHT:
         drag = SizeI(win.dragPrevPos.x - x, win.dragPrevPos.y - y);
-        win.MoveDocBy(drag.dx, drag.dy);
+
+        sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+		if(sumatraNetApi != NULL && sumatraNetApi->hitLabelForDragging)
+			sumatraNetApi->MoveSelectedOverlayObjectsBy(&win, x, y);
+		else
+			win.MoveDocBy(drag.dx, drag.dy);
         break;
+
+	case MA_IDLE:
+		sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+		if(sumatraNetApi != NULL && sumatraNetApi->mouseOverEnabled)
+			sumatraNetApi->CheckOverlayObjectAtMousePos(&win, x, y, false);
+		if(sumatraNetApi != NULL && (sumatraNetApi->measureMode || sumatraNetApi->lineMode))
+			sumatraNetApi->SetCurrentLineEnd(&win, x, y);
+		break;
     }
 
     win.dragPrevPos = PointI(x, y);
@@ -2315,6 +2346,10 @@
     win.dragStartPending = true;
     win.dragStart = PointI(x, y);
 
+	SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+	if(sumatraNetApi != NULL)
+		sumatraNetApi->CheckOverlayObjectAtMousePos(&win, x, y);
+
     // - without modifiers, clicking on text starts a text selection
     //   and clicking somewhere else starts a drag
     // - pressing Shift forces dragging
@@ -2363,10 +2398,26 @@
     bool didDragMouse = !win.dragStartPending ||
         abs(x - win.dragStart.x) > GetSystemMetrics(SM_CXDRAG) ||
         abs(y - win.dragStart.y) > GetSystemMetrics(SM_CYDRAG);
+
+	SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win.sumatraNetApi;
+
     if (MA_DRAGGING == win.mouseAction)
+	{
         OnDraggingStop(win, x, y, !didDragMouse);
+		if(sumatraNetApi != NULL)
+		{
+			if(didDragMouse && sumatraNetApi->hitLabelForDragging)
+				sumatraNetApi->CheckOverlayObjectMoved(&win, x, y);
+			else
+				sumatraNetApi->CheckMouseClick(&win,x,y,key);
+		}
+	}
     else
+	{
         OnSelectionStop(&win, x, y, !didDragMouse);
+		if(sumatraNetApi != NULL)
+			sumatraNetApi->CheckSelectionChanged(&win, key);
+	}
 
     PointD ptPage = win.dm->CvtFromScreen(PointI(x, y));
     // TODO: win.linkHandler->GotoLink might spin the event loop
@@ -3782,6 +3833,10 @@
     } else if (VK_DIVIDE == key) {
         win->dm->RotateBy(-90);
         gIsDivideKeyDown = true;
+	} else if (VK_DELETE == key) {
+		SumatraNetUnmanagedApi* sumatraNetApi = (SumatraNetUnmanagedApi*)win->sumatraNetApi;
+		if(sumatraNetApi != NULL)
+			sumatraNetApi->CheckDeleteOverlayObject();
     } else {
         return false;
     }
@@ -4574,21 +4629,21 @@
                 int deltaY = win.touchState.panPos.y - gi.ptsLocation.y;
                 win.touchState.panPos = gi.ptsLocation;
 
-                if ((gi.dwFlags & GF_INERTIA) && abs(deltaX) > abs(deltaY)) {
-                    // Switch pages once we hit inertia in a horizontal direction
-                    if (deltaX < 0)
-                        win.dm->GoToPrevPage(0);
-                    else if (deltaX > 0)
-                        win.dm->GoToNextPage(0);
-                    // When we switch pages, go back to the initial scroll position
-                    // and prevent further pan movement caused by the inertia
-                    win.dm->ScrollXTo(win.touchState.panScrollOrigX);
-                    win.touchState.panStarted = false;
-                }
-                else {
-                    // Pan/Scroll
-                    win.MoveDocBy(deltaX, deltaY);
-                }
+                //if ((gi.dwFlags & GF_INERTIA) && abs(deltaX) > abs(deltaY)) {
+                //    // Switch pages once we hit inertia in a horizontal direction
+                //    if (deltaX < 0)
+                //        win.dm->GoToPrevPage(0);
+                //    else if (deltaX > 0)
+                //        win.dm->GoToNextPage(0);
+                //    // When we switch pages, go back to the initial scroll position
+                //    // and prevent further pan movement caused by the inertia
+                //    win.dm->ScrollXTo(win.touchState.panScrollOrigX);
+                //    win.touchState.panStarted = false;
+                //}
+                //else {
+                // Pan/Scroll
+                win.MoveDocBy(deltaX, deltaY);
+                //}
             }
             break;
 
@@ -5432,3 +5487,1559 @@
 // TODO: a hackish but cheap way to separate startup code.
 // Could be made to compile stand-alone
 #include "SumatraStartup.cpp"
+
+///////////////////////////////////////////////////////////////////////////////
+// SumatraNet overlay objects
+///////////////////////////////////////////////////////////////////////////////
+OverlayObject::OverlayObject(std::string id, std::string label, std::string font, double x, double y, double dx, double dy, double lx, double ly, double angle, float fontSize, Color foreGround, Color backGround)
+{
+	this->id = id;
+	this->label = label;
+	this->font = font;
+	this->page = 1;
+	this->angle = angle;
+	this->fontSize = fontSize;
+	this->selected = false;
+	this->bold = false;
+	this->italic = false;
+	this->foreGround = foreGround;
+	this->backGround = backGround;
+
+	this->SetX(x);
+	this->SetY(y);
+	this->SetDX(dx);
+	this->SetDY(dy);
+	this->SetLX(lx);
+	this->SetLY(ly);
+}
+
+double OverlayObject::GetX()
+{
+	return (this->x_dpi / 72.0) * 2540.0;
+}
+
+double OverlayObject::GetY()
+{
+	return (this->y_dpi / 72.0) * 2540.0;
+}
+
+double OverlayObject::GetDX()
+{
+	if(this->dx_dpi <= 0.0)
+		return -1;
+
+	return (this->dx_dpi / 72.0) * 2540.0;
+}
+
+double OverlayObject::GetDY()
+{
+	if(this->dy_dpi <= 0.0)
+		return -1;
+
+	return (this->dy_dpi / 72.0) * 2540.0;
+}
+
+double OverlayObject::GetLX()
+{
+	if(this->lx_dpi <= 0.0)
+		return -1;
+
+	return (this->lx_dpi / 72.0) * 2540.0;
+}
+
+double OverlayObject::GetLY()
+{
+	if(this->ly_dpi <= 0.0)
+		return -1;
+
+	return (this->ly_dpi / 72.0) * 2540.0;
+}
+
+void OverlayObject::SetX(double x)
+{
+	this->x_dpi = (x / 2540.0) * 72.0;
+}
+
+void OverlayObject::SetY(double y)
+{
+	this->y_dpi = (y / 2540.0) * 72.0;
+}
+
+void OverlayObject::SetDX(double dx)
+{
+	if(dx <= 0.0)
+		this->dx_dpi = -1;
+	else
+		this->dx_dpi = (dx / 2540.0) * 72.0;
+}
+
+void OverlayObject::SetDY(double dy)
+{
+	if(dy <= 0.0)
+		this->dy_dpi = -1;
+	else
+		this->dy_dpi = (dy / 2540.0) * 72.0;
+}
+
+void OverlayObject::SetLX(double lx)
+{
+	if(lx <= 0.0)
+		this->lx_dpi = -1;
+	else
+		this->lx_dpi = (lx / 2540.0) * 72.0;
+}
+
+void OverlayObject::SetLY(double ly)
+{
+	if(ly <= 0.0)
+		this->ly_dpi = -1;
+	else
+		this->ly_dpi = (ly / 2540.0) * 72.0;
+}
+
+void OverlayObject::InitLXY(WindowInfo* win)
+{
+	if((lx_dpi >= 0.0 && ly_dpi >= 0.0) || this->currentLabelLocation.size() == 0)
+		return;
+
+	double pageHeight = win->dm->GetPageInfo(1)->page.dy;
+	PointI pointOnScreen(this->currentLabelLocation[0].X, this->currentLabelLocation[0].Y);
+	PointD pointOnPage = win->dm->CvtFromScreen(pointOnScreen, 1);
+
+	lx_dpi = pointOnPage.x;
+	ly_dpi = pageHeight - pointOnPage.y;
+}
+
+void OverlayObject::Move(double deltaX, double deltaY, bool moveLabel)
+{
+	if(!moveLabel)
+	{
+		this->x_dpi -= deltaX;
+		this->y_dpi += deltaY;
+	}
+	if(lx_dpi >= 0.0 && ly_dpi >= 0.0)
+	{
+		this->lx_dpi -= deltaX;
+		this->ly_dpi += deltaY;
+	}
+}
+
+void OverlayObject::Paint(Graphics* g, WindowInfo* win, int pageNo, RectI bounds)
+{
+	if(this->page!=pageNo)
+		return;
+
+	double pageHeight = win->dm->GetPageInfo(1)->page.dy;
+	float zoom = win->dm->ZoomReal(pageNo);
+
+	PointD pointOnPage(this->x_dpi, pageHeight - this->y_dpi);
+	PointI pointOnScreen = win->dm->CvtToScreen(pageNo, pointOnPage);
+
+	// calc size on screen
+	Widen<wchar_t> to_wstring;
+	std::wstring wsfont = to_wstring(this->font);
+	std::wstring wslabel = to_wstring(this->label);
+
+	FontFamily  fontFamily(wsfont.c_str());
+	float fsize = this->fontSize * zoom;
+	Font        font(&fontFamily, fsize, this->selected ? FontStyleBold : FontStyleRegular, Gdiplus::Unit::UnitPoint);
+	PointF      pointF(pointOnScreen.x, pointOnScreen.y);
+	RectF		bbox( 0, 0, 0, 0);
+	g->MeasureString(wslabel.c_str(), -1, &font, pointF, &bbox);
+
+	if(this->dx_dpi > 0.0 && this->dy_dpi > 0.0)
+	{
+		bbox.Width = this->dx_dpi * zoom;
+		bbox.Height = this->dy_dpi * zoom;
+	}
+
+	if((pointOnScreen.x + bbox.Width) < bounds.x || pointOnScreen.x > (bounds.x + bounds.dx))
+		return;
+
+	if((pointOnScreen.y + bbox.Height) < bounds.y || pointOnScreen.y > (bounds.y + bounds.dy))
+		return;
+	
+	PointF points[4] = { PointF(bbox.X, bbox.Y), PointF(bbox.X + bbox.Width, bbox.Y), PointF(bbox.X + bbox.Width, bbox.Y + bbox.Height), PointF(bbox.X, bbox.Y + bbox.Height) };
+
+	// calc rotation
+	double angle = win->dm->Rotation() - this->angle;
+	Matrix rotation;
+	if(angle != 0.0)
+	{
+		rotation.RotateAt(angle, pointF, Gdiplus::MatrixOrderAppend);
+		rotation.TransformPoints(points, 4);
+		g->SetTransform(&rotation);
+	}
+
+	//store current location
+	this->currentScreenLocation.assign(points, points + 4);
+
+	// paint lable bg
+	SolidBrush  bbrush(this->backGround);
+	SolidBrush  fbrush(this->foreGround);
+	if(this->selected)
+	{
+		bbrush.SetColor(Color::Purple);
+		fbrush.SetColor(Color::White);
+	}
+
+	g->FillRectangle(&bbrush, bbox);
+
+	StringFormat sformat;
+	sformat.SetAlignment(StringAlignmentNear);
+	// paint lable fg
+	if(this->dx_dpi <= 0.0 && this->dy_dpi <= 0.0)
+	{
+		g->DrawString(wslabel.c_str(), -1, &font, bbox, &sformat, &fbrush);
+	}
+	else
+	{
+		PointF labelPoint, llineStart, llineEnd;
+		
+		// draw label below object
+		if(bbox.Width > bbox.Height)
+		{
+			labelPoint = PointF(bbox.X + bbox.Width / 2, bbox.Y + bbox.Height + 25 * zoom);
+			llineStart = PointF(bbox.X + bbox.Width / 2, bbox.Y + bbox.Height);
+		}
+		//draw label left of object
+		else
+		{
+			labelPoint = PointF(bbox.X + bbox.Width + 25 * zoom, bbox.Y + bbox.Height / 2);
+			llineStart = PointF(bbox.X + bbox.Width, bbox.Y + bbox.Height / 2);
+		}
+		if(lx_dpi >= 0.0 && ly_dpi >= 0.0)
+		{
+			PointD lpointOnPage(this->lx_dpi, pageHeight - this->ly_dpi);
+			PointI lpointOnScreen = win->dm->CvtToScreen(pageNo, lpointOnPage);
+
+			labelPoint = PointF(lpointOnScreen.x, lpointOnScreen.y);
+		}
+
+		// calc label position & size
+		RectF llabelBox(0, 0, 0, 0);
+		g->MeasureString(wslabel.c_str(), -1, &font, labelPoint, &llabelBox);
+
+		PointF lpoints[4] = { PointF(llabelBox.X, llabelBox.Y), PointF(llabelBox.X + llabelBox.Width, llabelBox.Y), PointF(llabelBox.X + llabelBox.Width, llabelBox.Y + llabelBox.Height), PointF(llabelBox.X, llabelBox.Y + llabelBox.Height) };
+		if(angle != 0.0)
+			rotation.TransformPoints(lpoints, 4);
+
+		this->currentLabelLocation.assign(lpoints, lpoints + 4);
+
+		if(bbox.Width > bbox.Height)
+			llineEnd = PointF(llabelBox.X + llabelBox.Width / 2, llabelBox.Y);
+		else
+			llineEnd = PointF(llabelBox.X, llabelBox.Y + llabelBox.Height / 2);
+
+		if(lx_dpi >= 0.0 && ly_dpi >= 0.0)
+		{
+			// set linestart/lineend according to label position
+			if(llabelBox.Y + llabelBox.Height <= bbox.Y)
+			{
+				llineStart = PointF(bbox.X + bbox.Width / 2, bbox.Y);
+				llineEnd = PointF(llabelBox.X + llabelBox.Width / 2, llabelBox.Y + llabelBox.Height);
+			}
+			else
+			{
+				if(labelPoint.Y >= bbox.Y + bbox.Height)
+				{
+					llineStart = PointF(bbox.X + bbox.Width / 2, bbox.Y + bbox.Height);
+					llineEnd = PointF(llabelBox.X + llabelBox.Width / 2, llabelBox.Y);
+				}
+				else
+				{
+					if(labelPoint.X <= bbox.X)
+					{
+						llineStart = PointF(bbox.X, bbox.Y + bbox.Height / 2);
+						llineEnd = PointF(llabelBox.X + llabelBox.Width, llabelBox.Y + llabelBox.Height / 2);
+					}
+					else
+					{
+						llineStart = PointF(bbox.X + bbox.Width, bbox.Y + bbox.Height / 2);
+						llineEnd = PointF(llabelBox.X, llabelBox.Y + llabelBox.Height / 2);
+					}
+				}
+			}
+		}		
+
+		g->FillRectangle(&bbrush, llabelBox);
+
+		g->DrawString(wslabel.c_str(), -1, &font, llabelBox, &sformat, &fbrush);
+
+		Pen linePen(Color::Black);
+		g->DrawLine(&linePen, llineStart, llineEnd);
+	}
+
+	// reset rotation
+	if(angle != 0)
+	{
+		Matrix reset;
+		g->SetTransform(&reset);
+	}
+}
+
+bool OverlayObject::CheckSelectionChanged(WindowInfo* win)
+{
+	bool inSelection = this->CheckIsInSelection(win);
+
+	if(inSelection == this->selected)
+	{
+		if(this->selected)
+			return true;
+		else
+			return false;
+	}
+	else
+	{
+		this->selected = inSelection;
+		return true;
+	}
+}
+
+bool OverlayObject::CheckIsInSelection(WindowInfo* win)
+{
+	bool inSelection = CheckIsInSelection(win, false);
+	if(!inSelection)
+		inSelection = CheckIsInSelection(win, true);
+
+	return inSelection;
+}
+
+bool OverlayObject::CheckIsInSelection(WindowInfo* win, bool label)
+{
+	RectF objRect;
+	if(label)
+		objRect = this->GetRect(this->currentLabelLocation);
+	else
+		objRect = this->GetRect(this->currentScreenLocation);
+
+	if(objRect.Width == 0.0 && objRect.Height == 0)
+		return false;
+
+	double angle = win->dm->Rotation() - this->angle;
+	//it is a rectangle, so it s enough to check the intersection
+	if((((int)angle) % 90) == 0)
+	{
+		RectF selOnScreen(win->selectionRect.x, win->selectionRect.y, win->selectionRect.dx, win->selectionRect.dy);
+		return objRect.IntersectsWith(selOnScreen);
+	}
+	// it is a ploygon
+	else
+	{
+		return this->CheckIsPolyInSelection(win, label);
+	}
+}
+
+bool OverlayObject::CheckIsPolyInSelection(WindowInfo* win, bool label)
+{
+	int j = 1;
+
+	PointF objPoints[4];
+	RectF objRect;
+	if(label)
+	{
+		objPoints[0] = this->currentLabelLocation[0];
+		objPoints[1] = this->currentLabelLocation[1];
+		objPoints[2] = this->currentLabelLocation[2];
+		objPoints[3] = this->currentLabelLocation[3];
+
+		objRect = this->GetRect(this->currentLabelLocation);
+	}
+	else
+	{
+		objPoints[0] = this->currentScreenLocation[0];
+		objPoints[1] = this->currentScreenLocation[1];
+		objPoints[2] = this->currentScreenLocation[2];
+		objPoints[3] = this->currentScreenLocation[3];
+
+		objRect = this->GetRect(this->currentScreenLocation);
+	}
+
+	if( win->selectionRect.dx > 1 || win->selectionRect.dy > 1)
+	{
+		j = 4;
+		RectF selectionRectf(win->selectionRect.x, win->selectionRect.y, win->selectionRect.dx, win->selectionRect.dy);
+		if(!objRect.IntersectsWith(selectionRectf))
+			return false;
+
+		if(selectionRectf.Contains(objPoints[0]) ||
+			selectionRectf.Contains(objPoints[1]) ||
+			selectionRectf.Contains(objPoints[2]) ||
+			selectionRectf.Contains(objPoints[3]))
+			return true;
+	}
+
+	PointF selectionPoints[4] = 
+	{ 
+		PointF(win->selectionRect.x, win->selectionRect.y), 
+		PointF(win->selectionRect.x + win->selectionRect.dx, win->selectionRect.y), 
+		PointF(win->selectionRect.x + win->selectionRect.dx, win->selectionRect.y + win->selectionRect.dy),
+		PointF(win->selectionRect.x, win->selectionRect.y + win->selectionRect.dy)
+	};
+
+	int x, i;
+	int countCollision = 0;
+	PointF p0, p1, p2, p3;
+	for(x = 0; x < j; x++)
+	{
+		p0 = selectionPoints[x];
+		if(j == 1)
+			p1 = PointF(win->dm->viewPort.dx, win->selectionRect.y);
+		else
+		{
+			if(x == 3)
+				p1 = selectionPoints[0];
+			else
+				p1 = selectionPoints[x + 1];
+		}
+
+		for(i = 0; i < 4; i++)
+		{
+			p2 = objPoints[i];
+			if(i == 3)
+				p3 = objPoints[0];
+			else
+				p3 = objPoints[i + 1];
+
+			if(OverlayObject::CheckSegementIntersection(p0.X, p0.Y, p1.X, p1.Y, p2.X, p2.Y, p3.X, p3.Y))
+				countCollision++;
+		}
+	}
+
+	if(j == 1)
+		return countCollision == 1;
+
+	return countCollision > 1;
+}
+
+RectF OverlayObject::GetRect(std::vector<PointF> points)
+{
+	float minX = 0, minY = 0, maxX = 0, maxY = 0;
+
+	int i;
+	PointF curPoint;
+	for(i = 0; i < points.size(); i++)
+	{
+		curPoint = points[i]; 
+		if(i == 0)
+		{
+			minX = maxX = curPoint.X;
+			minY = maxY = curPoint.Y;
+		}
+
+		if(curPoint.X < minX)
+			minX = curPoint.X;
+		if(curPoint.X > maxX)
+			maxX = curPoint.X;
+
+		if(curPoint.Y < minY)
+			minY = curPoint.Y;
+		if(curPoint.Y > maxY)
+			maxY = curPoint.Y;
+	}
+
+	return RectF(minX, minY, maxX - minX, maxY -  minY);
+}
+
+std::string OverlayObject::ToString()
+{
+	std::stringstream stream;
+
+	int fgR, fgG, fgB, bgR, bgG, bgB;
+	fgR = this->foreGround.GetR();
+	fgG = this->foreGround.GetG();
+	fgB = this->foreGround.GetB();
+	bgR = this->backGround.GetR();	
+	bgG = this->backGround.GetG();
+	bgB = this->backGround.GetB();	
+	
+	stream << "{";
+	stream << this->id << "|";
+	stream << this->label << "|";
+	stream << this->GetX() << "|";
+	stream << this->GetY() << "|";
+	stream << this->GetDX() << "|";
+	stream << this->GetDY() << "|";
+	stream << this->GetLX() << "|";
+	stream << this->GetLY() << "|";
+	stream << this->angle << "|";
+	stream << this->font << "|";
+	stream << this->fontSize << "|";
+	stream << fgR << "|";
+	stream << fgG << "|";
+	stream << fgB << "|";
+	stream << bgR << "|";	
+	stream << bgG << "|";
+	stream << bgB;	
+	stream << "}";
+
+	return stream.str();
+}
+
+OverlayObject* OverlayObject::CreateFromString(std::string obj)
+{
+	// remove {...}
+	obj = obj.substr(1, obj.length() - 1);
+	obj = obj.substr(0, obj.length() - 1);
+
+	int loop = 0;
+	size_t pos = obj.find_first_of("|");
+	std::stringstream stream;
+	std::string stoken, id, label, font;
+	int bb, bg, br, fr, fg, fb;
+	double x, y, dx, dy, lx, ly, angle;
+	float fontSize;
+	while(pos != std::string::npos)
+	{
+		stream = std::stringstream("");
+
+		stoken = obj.substr(0, pos);
+		obj = obj.substr(pos + 1);
+
+		stream << stoken;
+
+		switch(loop)
+		{
+		case 0:
+			id = stream.str();
+			break;
+
+		case 1:
+			label = stream.str();
+			break;
+
+		case 2:
+			stream >> x;
+			break;
+
+		case 3:
+			stream >> y;
+			break;
+
+		case 4:
+			stream >> dx;
+			break;
+
+		case 5:
+			stream >> dy;
+			break;
+
+		case 6:
+			stream >> lx;
+			break;
+
+		case 7:
+			stream >> ly;
+			break;
+
+		case 8:
+			stream >> angle;
+			break;
+
+		case 9:
+			font = stream.str();
+			break;
+
+		case 10:
+			stream >> fontSize;
+			break;
+
+		case 11:
+			stream >> fr;
+			break;
+
+		case 12:
+			stream >> fg;
+			break;
+
+		case 13:
+			stream >> fb;
+			break;
+
+		case 14:
+			stream >> br;
+			break;
+
+		case 15:
+			stream >> bg;
+			break;
+		}
+
+		loop++;
+		pos = obj.find_first_of("|");
+	}
+
+	stream = std::stringstream("");
+	stream << obj;
+	stream >> bb;
+
+	return new OverlayObject(id, label, font, x, y, dx, dy, lx, ly, angle, fontSize, Color(fr, fg, fb), Color(br, bg, bb));
+}
+
+bool OverlayObject::CheckSegementIntersection(float p0_x, float p0_y, float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y)
+{
+    float s1_x, s1_y, s2_x, s2_y;
+    s1_x = p1_x - p0_x;     s1_y = p1_y - p0_y;
+    s2_x = p3_x - p2_x;     s2_y = p3_y - p2_y;
+
+    float s, t;
+    s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
+    t = ( s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);
+
+    if (s >= 0 && s <= 1 && t >= 0 && t <= 1)
+    {
+        // Collision detected
+        /*if (i_x != NULL)
+            *i_x = p0_x + (t * s1_x);
+        if (i_y != NULL)
+            *i_y = p0_y + (t * s1_y);*/
+        return true;
+    }
+
+    return false; // No collision
+}
+///////////////////////////////////////////////////////////////////////////////
+// end SumatraNet overlay objects
+///////////////////////////////////////////////////////////////////////////////
+
+///////////////////////////////////////////////////////////////////////////////
+// SumatraNet unmanged api
+///////////////////////////////////////////////////////////////////////////////
+SumatraNetUnmanagedApi::SumatraNetUnmanagedApi()
+{
+	this->hitLabelForDragging = false;
+	this->selectionChanging = false;
+	this->mouseOverEnabled = false;
+	this->measureMode = false;
+	this->lineMode = false;
+	this->moveLabel = false;
+	this->useExternContextMenu = false;
+	this->lastObj = NULL;
+	this->lineStart = NULL;
+	this->lineEnd = NULL;
+	this->curLineEnd = NULL;
+}
+
+void SumatraNetUnmanagedApi::UpdateViewer(WindowInfo* win, char* hwnd)
+{
+	if(!gPluginMode)
+		return;
+
+	Widen<wchar_t> to_wstring;
+	std::string shwnd(hwnd);
+	std::wstring wshwnd = to_wstring(shwnd);
+
+	HWND parentHWND = (HWND)_wtol(wshwnd.c_str());
+
+	SetParent(win->hwndFrame, parentHWND);
+	MoveWindow(win->hwndFrame, ClientRect(parentHWND));
+	ShowWindow(win->hwndFrame, SW_SHOW);
+	UpdateWindow(win->hwndFrame);
+}
+
+void SumatraNetUnmanagedApi::SetDelegates(
+	OnSelectionChangedDelegate selChanged, 
+	OnMouseClickDelegate mouseClick, 
+	OnDeleteDelegate onDelete, 
+	OnObjectMovedDelegate onMove, 
+	OnRequestContextMenuDelegate requestContextMenuPointer,
+	OnMouseOverObject onMouseOver,
+	OnDistanceMeasuredDelegate onMeasure,
+	OnLineDrawnDelegate onLine)
+{
+	this->notifySelectionChanged = selChanged;
+	this->notifyMouseClick = mouseClick;
+	this->notifyDelete = onDelete;
+	this->notifyObjectMoved = onMove;
+	this->requestContextMenu = requestContextMenuPointer;
+	this->notifyMouseOverObject = onMouseOver;
+	this->notifyDistanceMeasured = onMeasure;
+	this->notifyLineDrawn = onLine;
+}
+
+void SumatraNetUnmanagedApi::DrawOverlayObjets(HDC* hdc, WindowInfo* win, int pageNo, RectI bounds)
+{
+	if(this->selectionChanging)
+		return;
+
+	int i;
+	OverlayObject *curObj;
+	Graphics g(*hdc);
+	for(i=0;i< this->overlayObjects.size();i++)
+	{
+		curObj = this->overlayObjects.at(i);
+		curObj->currentScreenLocation.clear();
+		curObj->currentLabelLocation.clear();
+		curObj->Paint(&g, win, pageNo, bounds);
+	}
+}
+
+void SumatraNetUnmanagedApi::DrawLine(HDC* hdc, WindowInfo* win)
+{
+	if(!this->measureMode && !this->lineMode)
+		return;
+
+	if(this->lineStart == NULL || this->curLineEnd == NULL)
+		return;
+
+	Graphics g(*hdc);
+	SolidBrush lineBrush(Color::Red);
+	Pen linePen(&lineBrush, 2);
+
+	PointI startScreen = win->dm->CvtToScreen(1, *this->lineStart);
+
+	g.DrawEllipse(&linePen, startScreen.x - 2, startScreen.y - 2, 4, 4);
+	g.DrawLine(&linePen, startScreen.x, startScreen.y, this->curLineEnd->X, this->curLineEnd->Y);
+	g.DrawEllipse(&linePen, this->curLineEnd->X - 2, this->curLineEnd->Y - 2, 4, 4);
+}
+
+void SumatraNetUnmanagedApi::SetCurrentLineEnd(WindowInfo* win, int x, int y)
+{
+	if(this->lineStart == NULL)
+		return;
+
+	this->curLineEnd = new Point(x, y);
+	InvalidateRect(win->hwndCanvas, NULL, true);
+	UpdateWindow(win->hwndCanvas);
+}
+
+void SumatraNetUnmanagedApi::ProcessOverlayObjects(WindowInfo* win, char* objects)
+{
+	OverlayObject* oo;
+	std::string sobjects(objects);
+	std::string objToken;
+	size_t pos = sobjects.find_first_of("}");
+	int i;
+	bool found;
+	while(pos != std::string::npos)
+	{
+		objToken = sobjects.substr(0, pos + 1);
+		sobjects = sobjects.substr(pos + 1);
+
+		oo = OverlayObject::CreateFromString(objToken);
+		found = false;
+		for(i = 0; i < this->overlayObjects.size(); i++)
+		{
+			if(this->overlayObjects[i]->id == oo->id)
+			{
+				found = true;
+				oo->selected = this->overlayObjects[i]->selected;
+				this->overlayObjects[i] = oo;
+				break;
+			}
+		}
+
+		if(!found)
+		{
+			this->overlayObjects.push_back(oo);
+		}
+		
+		pos = sobjects.find_first_of("}");
+	}
+	
+	InvalidateRect(win->hwndCanvas, NULL, true);
+	UpdateWindow(win->hwndCanvas);
+}
+
+void SumatraNetUnmanagedApi::RemoveOverlayObject(WindowInfo* win, char* id)
+{
+	std::string sid(id);
+
+	int i;
+	bool repaint = false;
+	for(i=0;i<overlayObjects.size();i++)
+	{
+		if(overlayObjects[i]->id == sid)
+		{
+			overlayObjects.erase(overlayObjects.begin()+i);
+			repaint = true;
+			break;
+		}
+	}
+
+	if(repaint)
+	{
+		InvalidateRect(win->hwndCanvas, NULL, true);
+		UpdateWindow(win->hwndCanvas);
+	}
+}
+
+void SumatraNetUnmanagedApi::SetSelectedOverlayObjects(WindowInfo* win, char* objectIds)
+{
+	std::string sobjectIds(objectIds);
+	int i;
+	OverlayObject* curObj;
+	bool repaint = false;
+	size_t pos;
+	for( i = 0; i < this->overlayObjects.size(); i++)
+	{
+		curObj = this->overlayObjects[i];
+		pos = sobjectIds.find("|" + curObj->id + "|");
+
+		if(pos == std::string::npos)
+		{
+			if(curObj->selected)
+			{
+				repaint = true;
+				curObj->selected = false;
+			}
+		}
+		else
+		{
+			if(!curObj->selected)
+			{
+				repaint = true;
+				curObj->selected = true;
+			}
+		}
+	}
+
+	if(repaint)
+	{
+		InvalidateRect(win->hwndCanvas, NULL, true);
+		UpdateWindow(win->hwndCanvas);
+	}
+}
+
+bool SumatraNetUnmanagedApi::CheckSelectionChanged(WindowInfo* win, WPARAM key)
+{
+	if(win->selectionRect.dx == 0 && win->selectionRect.dy == 0)
+		win->selectionRect = RectI(win->selectionRect.x, win->selectionRect.y, 1, 1);
+
+	this->selectionChanging = true;
+
+	bool selectionChanged = false, notify = false;
+	int i;
+	OverlayObject *curObj;
+	for(i=0; i < this->overlayObjects.size(); i++)
+	{
+		curObj = this->overlayObjects[i];
+		if(key == MK_CONTROL)
+		{
+			if(curObj->CheckIsInSelection(win))
+			{
+				curObj->selected = !curObj->selected;
+				notify = true;
+			}
+		}
+		else
+			selectionChanged = curObj->CheckSelectionChanged(win);
+
+		if(selectionChanged)
+			notify = true;
+	}
+
+	this->selectionChanging = false;
+
+	if(notify)
+	{
+		win->showSelection = false;
+
+		InvalidateRect(win->hwndCanvas, NULL, true);
+		UpdateWindow(win->hwndCanvas);
+
+		this->notifySelectionChanged();
+	}
+
+	return notify;
+}
+	
+char* SumatraNetUnmanagedApi::GetSelectedOverlayObjectIds()
+{
+	int i;
+	OverlayObject* oo;
+	std::stringstream objIds;
+	for(i=0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		if(oo->selected)
+			objIds << oo->id << "|";
+	}
+
+	std::string sobjIds = objIds.str();
+	size_t len = sobjIds.length() + 1;
+	char* ret = new char[len];
+	strcpy(ret, sobjIds.c_str());
+
+	return ret;
+}
+
+char* SumatraNetUnmanagedApi::GetSelectedOverlayObjects()
+{
+	int i;
+	OverlayObject* oo;
+	std::stringstream objects;
+	for(i=0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		if(oo->selected)
+			objects << oo->ToString();
+	}
+
+	std::string sobjects = objects.str();
+	size_t len = sobjects.length() + 1;
+	char* ret = new char[len];
+	strcpy(ret, sobjects.c_str());
+
+	return ret;
+}
+
+void SumatraNetUnmanagedApi::DeselectOverlayObjects()
+{
+	int i;
+	for(i = 0; i < this->overlayObjects.size(); i++)
+		this->overlayObjects[i]->selected = false;
+}
+
+char* SumatraNetUnmanagedApi::GetAllOverlayObjects()
+{
+	int i;
+	OverlayObject* oo;
+	std::stringstream objects;
+	for(i=0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		objects << oo->ToString();
+	}
+
+	std::string sobjects = objects.str();
+	size_t len = sobjects.length() + 1;
+	char* ret = new char[len];
+	strcpy(ret, sobjects.c_str());
+
+	return ret;
+}
+
+void SumatraNetUnmanagedApi::CheckMouseClick(WindowInfo* win, int x, int y, WPARAM key)
+{
+	if(this->measureMode || this->lineMode)
+	{
+		PointI onScreen(x, y);
+		if(this->lineStart == NULL)
+		{			
+			this->lineStart = new PointD(win->dm->CvtFromScreen(onScreen));
+			return;
+		}
+		else
+			this->lineEnd = new PointD(win->dm->CvtFromScreen(onScreen));
+
+		if(this->measureMode)
+		{
+			// calc length and notify
+			double a = lineStart->x - lineEnd->x;
+			double b = lineStart->y - lineEnd->y;
+
+			double length_dpi = sqrt((a * a) + (b * b));
+			this->notifyDistanceMeasured((length_dpi / 72.0) * 2540.0);
+		}
+		else
+			if(this->lineMode)
+			{
+				// notif start/end point coords
+				double p1x = (this->lineStart->x / 72.0) * 2540.0;
+				double p1y = win->dm->GetPageInfo(1)->page.dy - this->lineStart->y;
+				p1y = (p1y / 72.0) * 2540.0;
+
+				double p2x = (this->lineEnd->x / 72.0) * 2540.0;
+				double p2y = win->dm->GetPageInfo(1)->page.dy - this->lineEnd->y;
+				p2y = (p2y / 72.0) * 2540.0;
+
+				this->notifyLineDrawn(p1x, p1y, p2x, p2y);
+			}
+
+		// reset 
+		this->lineMode = false;
+		this->measureMode = false;
+		this->lineEnd = NULL;
+		this->curLineEnd = NULL;
+		this->lineStart = NULL;
+
+		return;
+	}
+
+	win->selectionRect = RectI(x, y, 1, 1);
+	bool selChanged = this->CheckSelectionChanged(win, key);
+
+	if(!selChanged)
+	{
+		PointI pointOnScreen(x, y);
+		PointD pointOnPage = win->dm->CvtFromScreen(pointOnScreen);
+		double x = (pointOnPage.x / 72.0) * 2540.0;
+		double y = win->dm->GetPageInfo(1)->page.dy - pointOnPage.y;
+		y = (y / 72.0) * 2540.0;
+		this->notifyMouseClick(x, y);
+	}
+}
+
+void SumatraNetUnmanagedApi::CheckDeleteOverlayObject()
+{
+	int i;
+	OverlayObject* oo;
+	bool selection = false;
+	
+	for(i=0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		if(oo->selected)
+		{
+			selection = true;
+			break;
+		}
+	}
+
+	if(selection)
+		this->notifyDelete();
+}
+
+void SumatraNetUnmanagedApi::CheckOverlayObjectAtMousePos(WindowInfo* win, int x, int y, bool moveObj)
+{
+	if(this->measureMode || this->lineMode)
+		return;
+
+	int i;
+	OverlayObject* oo;
+	win->selectionRect = RectI(x, y, 1, 1);
+	for(i = 0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		
+		if(moveObj && oo->selected && oo->CheckIsInSelection(win))
+		{
+			this->hitLabelForDragging = true;
+			this->moveLabel = oo->CheckIsInSelection(win, true);
+			this->dragStart = win->dm->CvtFromScreen(PointI(x, y), 1);
+			this->lastDragLoc = win->dm->CvtFromScreen(PointI(x, y), 1);
+			break;
+		}
+		if(!moveObj && oo->CheckIsInSelection(win))
+			break;
+
+		oo = NULL;
+	}
+
+	if(moveObj && this->moveLabel)
+	{
+		for(i = 0; i < this->overlayObjects.size(); i++)
+		{
+			oo = this->overlayObjects[i];
+			if(oo->selected)
+				oo->InitLXY(win);
+		}
+	}
+
+	if(!moveObj)
+	{
+		if(oo == NULL)
+			this->lastObj = NULL;
+
+		if(oo == this->lastObj)
+			return;
+
+		this->lastObj = oo;
+		
+		size_t len = oo->id.length() + 1;
+		char* ret = new char[len];
+		strcpy(ret, oo->id.c_str());
+
+		this->notifyMouseOverObject(ret);
+	}
+}
+
+void SumatraNetUnmanagedApi::MoveSelectedOverlayObjectsBy(WindowInfo* win, int x, int y)
+{
+	PointD currentLoc = win->dm->CvtFromScreen(PointI(x, y), 1);
+	double deltaX = lastDragLoc.x - currentLoc.x;
+	double deltaY = lastDragLoc.y - currentLoc.y;
+
+	int i;
+	OverlayObject* oo;
+	bool repaint = false;
+	for(i = 0; i < this->overlayObjects.size(); i++)
+	{
+		oo = this->overlayObjects[i];
+		if(oo->selected)
+		{
+			oo->Move(deltaX, deltaY, this->moveLabel);
+			repaint = true;
+		}
+	}
+
+	this->lastDragLoc = currentLoc;
+
+	if(repaint)
+	{
+		InvalidateRect(win->hwndCanvas, NULL, true);
+		UpdateWindow(win->hwndCanvas);
+	}
+}
+
+void SumatraNetUnmanagedApi::CheckOverlayObjectMoved(WindowInfo* win, int x, int y)
+{
+	PointD dragEnd = win->dm->CvtFromScreen(PointI(x, y), 1);
+	double deltaX = this->dragStart.x - dragEnd.x;
+	double deltaY = this->dragStart.y - dragEnd.y;
+
+	if(deltaX != 0.0 || deltaY != 0.0)
+	{
+		double x = (deltaX / 72.0) * 2540.0;
+		double y = (deltaY / 72.0) * 2540.0;
+		this->notifyObjectMoved(x, -y, this->moveLabel);
+	}
+
+	this->hitLabelForDragging = false;
+	this->moveLabel = false;
+	this->dragStart = PointD();
+}
+
+void SumatraNetUnmanagedApi::CheckOnRequestContextMenu(WindowInfo* win, int x, int y)
+{
+	win->selectionRect = RectI(x, y, 1, 1);
+
+	int i;
+	OverlayObject *curObj = NULL;
+	for(i = 0; i < this->overlayObjects.size(); i++)
+	{
+		curObj = this->overlayObjects[i];
+		if(curObj->selected && curObj->CheckIsInSelection(win))
+			break;
+
+		curObj = NULL;
+	}
+
+	if(curObj == NULL)
+	{
+		this->requestContextMenu(x, y, "");
+		return;
+	}
+
+	size_t len = curObj->id.length() + 1;
+	char* ret = new char[len];
+	strcpy(ret, curObj->id.c_str());
+
+	this->requestContextMenu(x, y, ret);
+}
+
+void SumatraNetUnmanagedApi::ClearOverlayObjectList(WindowInfo* win)
+{
+	this->overlayObjects.clear();
+	
+	InvalidateRect(win->hwndCanvas, NULL, true);
+	UpdateWindow(win->hwndCanvas);
+}
+
+void SumatraNetUnmanagedApi::GetFakedCmd(CommandLineInfo& i, std::string file, std::string hwnd)
+{
+	i.bgColor = gGlobalPrefs->mainWindowBackground;
+    i.forwardSearch = gGlobalPrefs->forwardSearch;
+    i.escToExit = gGlobalPrefs->escToExit;
+    i.cbxMangaMode = gGlobalPrefs->comicBookUI.cbxMangaMode;
+    if (gGlobalPrefs->useSysColors) {
+        i.colorRange[0] = GetSysColor(COLOR_WINDOWTEXT);
+        i.colorRange[1] = GetSysColor(COLOR_WINDOW);
+    }
+    else {
+        i.colorRange[0] = gGlobalPrefs->fixedPageUI.textColor;
+        i.colorRange[1] = gGlobalPrefs->fixedPageUI.backgroundColor;
+    }
+
+	std::string ssumatra("\"SumatraNet.dll\" ");
+	std::string splugin(" -plugin ");
+	std::string scmd = ssumatra + "\"" + file + "\"" + splugin + hwnd;
+
+	Widen<wchar_t> to_wstring;
+	std::wstring wscmd = to_wstring(scmd);
+
+	i.ParseCommandLine((TCHAR*)wscmd.c_str());	
+}
+///////////////////////////////////////////////////////////////////////////////
+// end SumatraNet unmanged api
+///////////////////////////////////////////////////////////////////////////////
+
+///////////////////////////////////////////////////////////////////////////////
+// SumatraNet unmanged api callers
+///////////////////////////////////////////////////////////////////////////////
+extern "C" UNMANAGED_API WindowInfo* __stdcall CallSumatraNetViewer(char* hwnd, char* file, 
+	OnSelectionChangedDelegate selChangedPtr, 
+	OnMouseClickDelegate mouseClickPointer, 
+	OnDeleteDelegate onDeletePointer, 
+	OnObjectMovedDelegate onMovePointer, 
+	OnRequestContextMenuDelegate requestContextMenuPointer, 
+	OnMouseOverObject onMouseOver,
+	OnDistanceMeasuredDelegate onMeasure,
+	OnLineDrawnDelegate onLine)
+{
+	SumatraNetUnmanagedApi* sumatraNetApi = new SumatraNetUnmanagedApi();
+	sumatraNetApi->SetDelegates(selChangedPtr, mouseClickPointer, onDeletePointer, onMovePointer, requestContextMenuPointer, onMouseOver, onMeasure, onLine);
+	sumatraNetApi->hwnd= std::string(hwnd);
+	sumatraNetApi->file = std::string(file);
+	
+    int retCode = 1;    // by default it's error
+
+#ifdef DEBUG
+    // Memory leak detection (only enable _CRTDBG_LEAK_CHECK_DF for
+    // regular termination so that leaks aren't checked on exceptions,
+    // aborts, etc. where some clean-up might not take place)
+    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF);
+    //_CrtSetBreakAlloc(421);
+    TryLoadMemTrace();
+#endif
+
+    DisableDataExecution();
+    // ensure that C functions behave consistently under all OS locales
+    // (use Win32 functions where localized input or output is desired)
+    setlocale(LC_ALL, "C");
+    // don't show system-provided dialog boxes when accessing files on drives
+    // that are not mounted (e.g. a: drive without floppy or cd rom drive
+    // without a cd).
+    SetErrorMode(SEM_NOOPENFILEERRORBOX | SEM_FAILCRITICALERRORS);
+
+    srand((unsigned int)time(NULL));
+
+    // load uiautomationcore.dll before installing crash handler (i.e. initializing
+    // dbghelp.dll), so that we get function names/offsets in GetCallstack()
+    uia::Initialize();
+#ifdef DEBUG
+    dbghelp::RememberCallstackLogs();
+#endif
+
+    //SetupCrashHandler();
+
+	if(TotalWindowsCount() == 0)
+	{
+		ScopedOle ole;
+		InitAllCommonControls();
+		ScopedGdiPlus gdiPlus(true);
+		mui::Initialize();
+		uitask::Initialize();
+	}
+
+    prefs::Load();
+
+    CommandLineInfo i;
+	SumatraNetUnmanagedApi::GetFakedCmd(i, file, hwnd);
+
+    SetCurrentLang(i.lang ? i.lang : gGlobalPrefs->uiLanguage);
+
+    if (i.showConsole)
+        RedirectIOToConsole();
+    if (i.makeDefault)
+        AssociateExeWithPdfExtension();
+    if (i.pathsToBenchmark.Count() > 0) {
+        BenchFileOrDir(i.pathsToBenchmark);
+        if (i.showConsole)
+            system("pause");
+    }
+    gCrashOnOpen = i.crashOnOpen;
+
+    gGlobalPrefs->mainWindowBackground = i.bgColor;
+    if (gGlobalPrefs->forwardSearch.highlightColor != i.forwardSearch.highlightColor ||
+        gGlobalPrefs->forwardSearch.highlightOffset != i.forwardSearch.highlightOffset ||
+        gGlobalPrefs->forwardSearch.highlightPermanent != i.forwardSearch.highlightPermanent ||
+        gGlobalPrefs->forwardSearch.highlightWidth != i.forwardSearch.highlightWidth) {
+        gGlobalPrefs->enableTeXEnhancements = true;
+    }
+    gGlobalPrefs->forwardSearch = i.forwardSearch;
+    gGlobalPrefs->escToExit = i.escToExit;
+    gGlobalPrefs->comicBookUI.cbxMangaMode = i.cbxMangaMode;
+    gPolicyRestrictions = GetPolicies(i.restrictedUse);
+    gRenderCache.colorRange[0] = i.colorRange[0];
+    gRenderCache.colorRange[1] = i.colorRange[1];
+    DebugGdiPlusDevice(gUseGdiRenderer);
+
+    if (i.inverseSearchCmdLine) {
+        str::ReplacePtr(&gGlobalPrefs->inverseSearchCmdLine, i.inverseSearchCmdLine);
+        gGlobalPrefs->enableTeXEnhancements = true;
+    }
+
+	if(TotalWindowsCount() == 0)
+	{
+		RegisterWinClass((HINSTANCE)hInst);
+		InstanceInit((HINSTANCE)hInst, 0);
+	}
+
+    if (i.hwndPluginParent) 
+	{
+        SetupPluginMode(i);
+		gGlobalPrefs->showToolbar = false;
+    }
+
+    if (i.fileNames.Count() == 0 && gGlobalPrefs->rememberOpenedFiles && gGlobalPrefs->showStartPage) {
+        // make the shell prepare the image list, so that it's ready when the first window's loaded
+        SHFILEINFO sfi;
+        SHGetFileInfo(L".pdf", 0, &sfi, sizeof(sfi), SHGFI_SYSICONINDEX | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES);
+    }
+
+    if (!i.reuseInstance && gGlobalPrefs->reuseInstance && FindWindow(FRAME_CLASS_NAME, 0))
+        i.reuseInstance = true;
+
+    WindowInfo *win = NULL;
+    bool isFirstWin = TotalWindowsCount() == 0;
+
+    for (size_t n = 0; n < i.fileNames.Count(); n++) {
+        if (i.reuseInstance && !i.printDialog) {
+            OpenUsingDde(i.fileNames.At(n), i, isFirstWin);
+        } else {
+            win = LoadOnStartup(i.fileNames.At(n), i, isFirstWin);
+            if (!win) {
+                retCode++;
+                continue;
+            }
+            if (i.printDialog)
+                OnMenuPrint(win, i.exitWhenDone);
+        }
+        isFirstWin = false;
+    }
+
+    if (isFirstWin) {
+        win = CreateAndShowWindowInfo();
+    }
+
+    UpdateUITextForLanguage(); // needed for RTL languages
+    if (isFirstWin)
+        UpdateToolbarAndScrollbarState(*win);
+
+    // call this once it's clear whether Perm_SavePreferences has been granted
+    prefs::RegisterForFileChanges();
+
+	win->sumatraNetApi = sumatraNetApi;
+
+	return win;
+}
+
+extern "C" UNMANAGED_API void __stdcall CallOpenNewFile(WindowInfo* win, char* file)
+{
+	if(win != NULL)
+	{
+		std::string sfile(file);
+		Widen<wchar_t> to_wstring;
+		std::wstring wfile = to_wstring(sfile);
+		
+		if(win->sumatraNetApi != NULL)
+			((SumatraNetUnmanagedApi*)win->sumatraNetApi)->overlayObjects.clear();
+
+		LoadArgs args(wfile.c_str(), win);
+		args.showWin = true;
+		args.forceReuse = true;
+		LoadDocument(args);
+	}
+}
+
+extern "C" UNMANAGED_API bool __stdcall CallIsDocOpen(WindowInfo* win)
+{
+	if(win != NULL)
+		return win->IsDocLoaded();
+	else
+		return false;
+}
+
+extern "C" UNMANAGED_API void __stdcall CallUpdateViewer(WindowInfo* win, char* hwnd)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->UpdateViewer(win, hwnd);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallFocusViewer(WindowInfo* win)
+{
+	if(win != NULL)
+	{
+		win->Focus();
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallSetMouseOverEnabled(WindowInfo* win, bool enabled)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->mouseOverEnabled = enabled;
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallSetMeasureModeEnabled(WindowInfo* win, bool enabled)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->measureMode = enabled;
+		if(enabled)
+		{
+			((SumatraNetUnmanagedApi*)win->sumatraNetApi)->DeselectOverlayObjects();
+			InvalidateRect(win->hwndCanvas, NULL, true);
+			UpdateWindow(win->hwndCanvas);
+		}
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallSetLineModeEnabled(WindowInfo* win, bool enabled)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->lineMode = enabled;
+		if(enabled)
+		{
+			((SumatraNetUnmanagedApi*)win->sumatraNetApi)->DeselectOverlayObjects();
+			InvalidateRect(win->hwndCanvas, NULL, true);
+			UpdateWindow(win->hwndCanvas);
+		}
+	}
+}
+
+extern "C" UNMANAGED_API PointF* __stdcall CallCvtScreen2Doc(WindowInfo* win, Point* screenCoords)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		PointD val = win->dm->CvtFromScreen(PointI(screenCoords->X, screenCoords->Y), 1);
+
+		double x = (val.x / 72.0) * 2540.0;
+		double y = win->dm->GetPageInfo(1)->page.dy - val.y;
+		y = (y / 72.0) * 2540.0;
+
+		PointF* res = new PointF(x, y);
+		return res;
+	}
+}
+
+extern "C" UNMANAGED_API Point* __stdcall CallCvtDoc2Screen(WindowInfo* win, PointF* docCoords)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		double x = (docCoords->X / 2540.0) * 72.0;
+		double y = (docCoords->Y / 2540.0) * 72.0;
+		y = win->dm->GetPageInfo(1)->page.dy - y;
+
+		PointI val = win->dm->CvtToScreen(1, PointD(x, y));
+		Point* res = new Point(val.x, val.y);
+		return res;
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallSaveAs(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		OnMenuSaveAs(*win);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallPrint(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		OnMenuPrint(win);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallFitPageWidth(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		ChangeZoomLevel(win, ZOOM_FIT_WIDTH, true);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallFitWholePage(WindowInfo * win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		ChangeZoomLevel(win, ZOOM_FIT_PAGE, false);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallZoomOut(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		ZoomToSelection(win, win->dm->NextZoomStep(ZOOM_MIN));
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallZoomIn(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		ZoomToSelection(win, win->dm->NextZoomStep(ZOOM_MAX));
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallRotateLeft(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		win->dm->RotateBy(-90);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallRotateRight(WindowInfo* win)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		win->dm->RotateBy(90);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallRotateCounterClockWise(WindowInfo* win, int angle)
+{
+	if(win != NULL && win->IsDocLoaded())
+	{
+		win->dm->RotateBy(angle * -1);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallProcessOverlayObjects(WindowInfo* win, char* objs)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->ProcessOverlayObjects(win, objs);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallSetSelectedOverlayObjects(WindowInfo* win, char* objectIds)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->SetSelectedOverlayObjects(win, objectIds);
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallRemoveOverlayObject(WindowInfo* win, char* id)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->RemoveOverlayObject(win, id);
+	}
+}
+
+extern "C" UNMANAGED_API char* __stdcall CallGetSelectedOverlayObjectIds(WindowInfo* win)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		return ((SumatraNetUnmanagedApi*)win->sumatraNetApi)->GetSelectedOverlayObjectIds();
+	}
+}
+
+extern "C" UNMANAGED_API char* __stdcall CallGetSelectedOverlayObjects(WindowInfo* win)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		return ((SumatraNetUnmanagedApi*)win->sumatraNetApi)->GetSelectedOverlayObjects();
+	}
+}
+
+extern "C" UNMANAGED_API char* __stdcall CallGetAllOverlayObjects(WindowInfo* win)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		return ((SumatraNetUnmanagedApi*)win->sumatraNetApi)->GetAllOverlayObjects();
+	}
+}
+
+extern "C" UNMANAGED_API void __stdcall CallClearOverlayObjectList(WindowInfo* win)
+{
+	if(win != NULL && win->sumatraNetApi != NULL)
+	{
+		((SumatraNetUnmanagedApi*)win->sumatraNetApi)->ClearOverlayObjectList(win);
+	}
+}
+///////////////////////////////////////////////////////////////////////////////
+// end SumatraNet unmanged api callers
+///////////////////////////////////////////////////////////////////////////////
\ No newline at end of file
Index: src/SumatraPDF.h
===================================================================
--- src/SumatraPDF.h	(revision 25)
+++ src/SumatraPDF.h	(working copy)
@@ -8,6 +8,12 @@
 #include "Favorites.h"
 #include "SumatraWindow.h"
 #include "Translations.h"
+#include "DisplayModel.h"
+#include "ParseCommandLine.h"
+#include <string>
+#include <vector>
+using namespace Gdiplus;
+#include "GdiPlusUtil.h"
 
 #define FRAME_CLASS_NAME        L"SUMATRA_PDF_FRAME"
 #define SUMATRA_WINDOW_TITLE    L"SumatraPDF"
@@ -154,4 +160,228 @@
 void        LoadDocument2(const WCHAR *fileName, const SumatraWindow& win);
 WindowInfo *CreateAndShowWindowInfo();
 
+///////////////////////////////////////////////////////////////////////////////
+// SumatraNet
+///////////////////////////////////////////////////////////////////////////////
+
+// Put this class in your personal toolbox... 
+ template<class E, 
+ class T = std::char_traits<E>, 
+ class A = std::allocator<E> > 
+  
+ class Widen : public std::unary_function< 
+     const std::string&, std::basic_string<E, T, A> > 
+ { 
+     std::locale loc_; 
+     const std::ctype<E>* pCType_; 
+  
+     // No copy-constructor, no assignment operator... 
+     Widen(const Widen&); 
+     Widen& operator= (const Widen&); 
+  
+ public: 
+     // Constructor... 
+     Widen(const std::locale& loc = std::locale()) : loc_(loc) 
+     { 
+#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6.0... 
+         using namespace std; 
+         pCType_ = &_USE(loc, ctype<E> ); 
+#else 
+         pCType_ = &std::use_facet<std::ctype<E> >(loc); 
+#endif 
+     } 
+  
+     // Conversion... 
+     std::basic_string<E, T, A> operator() (const std::string& str) const 
+     { 
+         typename std::basic_string<E, T, A>::size_type srcLen = 
+             str.length(); 
+         const char* pSrcBeg = str.c_str(); 
+         std::vector<E> tmp(srcLen); 
+  
+         pCType_->widen(pSrcBeg, pSrcBeg + srcLen, &tmp[0]); 
+         return std::basic_string<E, T, A>(&tmp[0], srcLen); 
+     } 
+ }; 
+
+class OverlayObject
+{
+public:
+	std::string id, label, font;
+	double angle;
+	int page;
+	float fontSize;
+	bool selected, bold, italic;
+	std::vector<PointF> currentScreenLocation, currentLabelLocation;
+	Color foreGround, backGround;
+
+	OverlayObject(std::string id, std::string label, std::string font, double x, double y, double dx, double dy , double lx, double ly, double angle, float fontSize, Color foreGround, Color backGround);
+	double GetX();
+	double GetY();
+	double GetDX();
+	double GetDY();
+	double GetLX();
+	double GetLY();
+	void SetX(double x);
+	void SetY(double y);
+	void SetDX(double dx);
+	void SetDY(double dy);
+	void SetLX(double lx);
+	void SetLY(double ly);
+	void InitLXY(WindowInfo* win);
+	void Move(double deltaX, double deltaY, bool moveLabel);
+	void Paint(Graphics* g, WindowInfo* win, int pageNo, RectI bounds);
+	bool CheckSelectionChanged(WindowInfo* win);
+	bool CheckIsInSelection(WindowInfo* win);
+	bool CheckIsInSelection(WindowInfo* win, bool label);
+	bool CheckIsPolyInSelection(WindowInfo* win, bool label);
+	RectF GetRect(std::vector<PointF> points);
+	std::string ToString();
+	static OverlayObject* CreateFromString(std::string sobj);
+	static bool CheckSegementIntersection(float p0_x, float p0_y, float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y);
+
+private:
+	double x_dpi, y_dpi, dx_dpi, dy_dpi, lx_dpi, ly_dpi;
+};
+
+#ifndef __SumatraNetUnmanagedApi_h__
+#define __SumatraNetUnmanagedApi_h__
+
+#define UNMANAGED_EXPORTS
+
+#ifdef UNMANAGED_EXPORTS
+#define UNMANAGED_API __declspec(dllexport)
+#else
+#define UNMANAGED_API __declspec(dllimport)
+#endif
+
+typedef void (__stdcall *OnSelectionChangedDelegate)();
+typedef void (__stdcall *OnDeleteDelegate)();
+typedef void (__stdcall *OnMouseOverObject)(char* id);
+// x,y coords on page
+typedef void (__stdcall *OnMouseClickDelegate)(double x, double y);
+typedef void (__stdcall *OnObjectMovedDelegate)(double deltaX, double deltaY, bool moveLabel);
+typedef void (__stdcall *OnDistanceMeasuredDelegate)(double distance);
+typedef void (__stdcall *OnLineDrawnDelegate)(double p1x, double p1y, double p2x, double p2y);
+//x,y coords on screen
+typedef void (__stdcall *OnRequestContextMenuDelegate)(int x, int y, char* id);
+
+class UNMANAGED_API SumatraNetUnmanagedApi 
+{
+public:
+	std::vector<OverlayObject*> overlayObjects;
+	OverlayObject* lastObj;
+	bool hitLabelForDragging, selectionChanging, mouseOverEnabled, measureMode, lineMode, useExternContextMenu;
+	std::string hwnd;
+	std::string file;
+
+	SumatraNetUnmanagedApi();
+	void SumatraNetViewer(char* hwnd, char* file);
+	void UpdateViewer(WindowInfo* win, char* hwnd);
+	void SetDelegates(
+		OnSelectionChangedDelegate selChanged, 
+		OnMouseClickDelegate mouseClick, 
+		OnDeleteDelegate onDelete, 
+		OnObjectMovedDelegate onMove, 
+		OnRequestContextMenuDelegate requestContextMenuPointer, 
+		OnMouseOverObject onMouseOver,
+		OnDistanceMeasuredDelegate onMeasure,
+		OnLineDrawnDelegate onLine);
+
+	void DrawOverlayObjets(HDC* hdc, WindowInfo* win, int pageNo, RectI bounds);
+	void DrawLine(HDC* hdc, WindowInfo* win);
+	void SetCurrentLineEnd(WindowInfo* win, int x, int y);
+
+	//void ProcessOverlayObject(WindowInfo* win, char* id, char* label, char* font, double x, double y, double dx, double dy, double angle, float fontSize, Color foreGround, Color backGround, bool update, bool repaint = true);
+	void ProcessOverlayObjects(WindowInfo* win, char* objects);
+	void RemoveOverlayObject(WindowInfo* win, char* id);
+	void SetSelectedOverlayObjects(WindowInfo* win, char* objectIds);
+	bool CheckSelectionChanged(WindowInfo* win, WPARAM key);
+	char* GetSelectedOverlayObjectIds();
+	char* GetSelectedOverlayObjects();
+	void DeselectOverlayObjects();
+	char* GetAllOverlayObjects();
+	// x,y coords on screen
+	void CheckMouseClick(WindowInfo* win, int x, int y, WPARAM key);
+	void CheckDeleteOverlayObject();
+	void CheckOverlayObjectAtMousePos(WindowInfo* win, int x, int y, bool moveObj = true);
+	void ClearOverlayObjectList(WindowInfo* win);
+	void MoveSelectedOverlayObjectsBy(WindowInfo* win, int x, int y);
+	void CheckOverlayObjectMoved(WindowInfo* win, int x, int y);
+
+	void CheckOnRequestContextMenu(WindowInfo* win, int x, int y);
+
+	static void GetFakedCmd(CommandLineInfo& i, std::string file, std::string hwnd);
+
+private:
+	PointD dragStart;
+	PointD lastDragLoc;
+	PointD* lineStart;
+	PointD* lineEnd;
+	Point* curLineEnd;
+	bool moveLabel;
+	OnSelectionChangedDelegate notifySelectionChanged;
+	OnDeleteDelegate notifyDelete;
+	OnMouseClickDelegate notifyMouseClick;
+	OnObjectMovedDelegate notifyObjectMoved;
+	OnMouseOverObject notifyMouseOverObject;
+	OnDistanceMeasuredDelegate notifyDistanceMeasured;
+	OnLineDrawnDelegate notifyLineDrawn;
+	OnRequestContextMenuDelegate requestContextMenu;
+
+	void InitViewer();
+};
+
+#endif //__SumatraNetUnmanagedApi_h__
+
+#ifndef __SumatraNetUnmanagedApiCallers_h__
+#define __SumatraNetUnmanagedApiCallers_h__
+
+extern "C" {
+	
+	extern UNMANAGED_API WindowInfo* __stdcall CallSumatraNetViewer(char* hwnd, char* file,
+		OnSelectionChangedDelegate selChangedPtr, 
+		OnMouseClickDelegate mouseClickPointer, 
+		OnDeleteDelegate onDeletePointer, 
+		OnObjectMovedDelegate onMovePointer, 
+		OnRequestContextMenuDelegate requestContextMenuPointer,
+		OnMouseOverObject onMouseOver,
+		OnDistanceMeasuredDelegate onMeasure,
+		OnLineDrawnDelegate onLine);
+	extern UNMANAGED_API void __stdcall CallOpenNewFile(WindowInfo* win, char* file);
+	extern UNMANAGED_API bool __stdcall CallIsDocOpen(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallUpdateViewer(WindowInfo* win, char* hwnd);
+	extern UNMANAGED_API void __stdcall CallFocusViewer(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallSetMouseOverEnabled(WindowInfo* win, bool enabled);
+	extern UNMANAGED_API void __stdcall CallSetMeasureModeEnabled(WindowInfo* win, bool enabled);
+	extern UNMANAGED_API void __stdcall CallSetLineModeEnabled(WindowInfo* win, bool enabled);
+	extern UNMANAGED_API PointF* __stdcall CallCvtScreen2Doc(WindowInfo* win, Point* screenCoords);
+	extern UNMANAGED_API Point* __stdcall CallCvtDoc2Screen(WindowInfo* win, PointF* docCoords);
+
+	//extern UNMANAGED_API void __stdcall CallProcessOverlayObject(WindowInfo* win, char* id, char* label, char* font, double x, double y, double dx, double dy, double angle, float fontSize, int foreGround, int backGround, bool update);
+	extern UNMANAGED_API void __stdcall CallProcessOverlayObjects(WindowInfo* win, char* objs);
+	extern UNMANAGED_API void __stdcall CallSetSelectedOverlayObjects(WindowInfo* win, char* objectIds);
+	extern UNMANAGED_API void __stdcall CallRemoveOverlayObject(WindowInfo* win, char* id);
+	extern UNMANAGED_API char* __stdcall CallGetSelectedOverlayObjectIds(WindowInfo* win);
+	extern UNMANAGED_API char* __stdcall CallGetSelectedOverlayObjects(WindowInfo* win);
+	extern UNMANAGED_API char* __stdcall CallGetAllOverlayObjects(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallClearOverlayObjectList(WindowInfo* win);
+
+	extern UNMANAGED_API void __stdcall CallSaveAs(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallPrint(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallFitPageWidth(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallFitWholePage(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallZoomOut(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallZoomIn(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallRotateLeft(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallRotateRight(WindowInfo* win);
+	extern UNMANAGED_API void __stdcall CallRotateCounterClockWise(WindowInfo* win, int angle);
+}
+
+#endif // __SumatraNetUnmanagedApiCallers_h__
+
+///////////////////////////////////////////////////////////////////////////////
+// end SumatraNet
+///////////////////////////////////////////////////////////////////////////////
+
 #endif
Index: src/SumatraStartup.cpp
===================================================================
--- src/SumatraStartup.cpp	(revision 25)
+++ src/SumatraStartup.cpp	(working copy)
@@ -540,3 +540,10 @@
     return retCode;
 #endif
 }
+
+BOOL WINAPI DllMain(HANDLE hinstDLL, DWORD dwReason, LPVOID lpvReserved)
+{
+	hInst = hinstDLL;
+
+	return true;
+}
\ No newline at end of file
Index: src/WindowInfo.cpp
===================================================================
--- src/WindowInfo.cpp	(revision 25)
+++ src/WindowInfo.cpp	(working copy)
@@ -39,6 +39,7 @@
     userAnnots(NULL), userAnnotsModified(false),
     uia_provider(NULL)
 {
+	sumatraNetApi = NULL;
     dpi = win::GetHwndDpi(hwndFrame, &uiDPIFactor);
     touchState.panStarted = false;
     buffer = new DoubleBuffer(hwndCanvas, canvasRc);
Index: src/WindowInfo.h
===================================================================
--- src/WindowInfo.h	(revision 25)
+++ src/WindowInfo.h	(working copy)
@@ -58,6 +58,7 @@
 public:
     WindowInfo(HWND hwnd);
     ~WindowInfo();
+	void* sumatraNetApi;
 
     // TODO: error windows currently have
     //       !IsAboutWindow() && !IsDocLoaded()
Index: vs/installer-vc2010.vcxproj
===================================================================
--- vs/installer-vc2010.vcxproj	(revision 25)
+++ vs/installer-vc2010.vcxproj	(working copy)
@@ -5,14 +5,26 @@
       <Configuration>Debug</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
     <ProjectConfiguration Include="Release analyze|Win32">
       <Configuration>Release analyze</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Release analyze|x64">
+      <Configuration>Release analyze</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
     <ProjectConfiguration Include="Release|Win32">
       <Configuration>Release</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
   </ItemGroup>
   <PropertyGroup Label="Globals">
     <ProjectName>Installer</ProjectName>
@@ -24,76 +36,142 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <PropertyGroup Label="UserMacros" />
   <PropertyGroup>
     <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(Configuration)\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(Configuration)\</OutDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(Configuration)\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(Configuration)\</IntDir>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">cd .. &amp;&amp; .\scripts\build-release.bat -testinst</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">cd .. &amp;&amp; .\scripts\build-release.bat -testinst</NMakeBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">cd .. &amp;&amp; .\scripts\build-release.bat -testinst</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">cd .. &amp;&amp; .\scripts\build-release.bat -testinst</NMakeReBuildCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">del /s obj-dbg</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">del /s obj-dbg</NMakeCleanCommandLine>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">..\obj-dbg\Installer.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">..\obj-dbg\Installer.exe</NMakeOutput>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">WIN32;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">WIN32;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src;$(ProjectDir)\..\ext\lzma\C</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src;$(ProjectDir)\..\ext\lzma\C</NMakeIncludeSearchPath>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(Configuration)\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(Configuration)\</OutDir>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(Configuration)\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(Configuration)\</OutDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(Configuration)\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(Configuration)\</IntDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(Configuration)\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(Configuration)\</IntDir>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">cd .. &amp;&amp; .\scripts\build-release.bat -testrelinst</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">cd .. &amp;&amp; .\scripts\build-release.bat -testrelinst</NMakeBuildCommandLine>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">.\scripts\build-release.bat -testrelinst</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">.\scripts\build-release.bat -testrelinst</NMakeBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">cd .. &amp;&amp; .\scripts\build-release.bat -testrelinst</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">cd .. &amp;&amp; .\scripts\build-release.bat -testrelinst</NMakeReBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">.\scripts\build-release.bat -testrelinst</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">.\scripts\build-release.bat -testrelinst</NMakeReBuildCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">del /s obj-dbg</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">del /s obj-dbg</NMakeCleanCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">del /s obj-dbg</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">del /s obj-dbg</NMakeCleanCommandLine>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">..\obj-rel\Installer.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">..\obj-rel\Installer.exe</NMakeOutput>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">obj-rel\SumatraPDF-install.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">obj-rel\SumatraPDF-install.exe</NMakeOutput>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\src;$(ProjectDir)\src\utils;$(ProjectDir)\src\utils\msvc;$(ProjectDir)\mupdf\fitz;$(ProjectDir)\mupdf\pdf;$(ProjectDir)\mupdf\xps;$(ProjectDir)\ext\libjpeg-turbo;$(ProjectDir)\ext\zlib-1.2.5;$(ProjectDir)\ext\zlib-1.2.5\minizip;$(ProjectDir)\ext\CHMLib\src</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\src;$(ProjectDir)\src\utils;$(ProjectDir)\src\utils\msvc;$(ProjectDir)\mupdf\fitz;$(ProjectDir)\mupdf\pdf;$(ProjectDir)\mupdf\xps;$(ProjectDir)\ext\libjpeg-turbo;$(ProjectDir)\ext\zlib-1.2.5;$(ProjectDir)\ext\zlib-1.2.5\minizip;$(ProjectDir)\ext\CHMLib\src</NMakeIncludeSearchPath>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
   </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
     <BuildLog>
       <Path>obj-dbg\BuildLog.htm</Path>
     </BuildLog>
   </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <BuildLog>
+      <Path>obj-dbg\BuildLog.htm</Path>
+    </BuildLog>
+  </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
     <BuildLog>
       <Path>..\obj-rel\BuildLog.htm</Path>
     </BuildLog>
   </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <BuildLog>
+      <Path>..\obj-rel\BuildLog.htm</Path>
+    </BuildLog>
+  </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">
     <BuildLog>
       <Path>..\obj-rel\BuildLog.htm</Path>
     </BuildLog>
   </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">
+    <BuildLog>
+      <Path>..\obj-rel\BuildLog.htm</Path>
+    </BuildLog>
+  </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\src\CrashHandler.cpp" />
     <ClCompile Include="..\src\installer\Install.cpp" />
Index: vs/sumatrapdf-vc2010.sln
===================================================================
--- vs/sumatrapdf-vc2010.sln	(revision 25)
+++ vs/sumatrapdf-vc2010.sln	(working copy)
@@ -1,27 +1,38 @@
 ﻿
 Microsoft Visual Studio Solution File, Format Version 11.00
 # Visual Studio 2010
-# SharpDevelop 4.3
-Project("{0E96FCFA-9DAC-4534-AC18-01A90C368873}") = "sumatrapdf-vc2010", "sumatrapdf-vc2010.vcxproj", "{9458F693-A9CC-4786-B79A-A2103EC71FA3}"
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "sumatrapdf-vc2010", "sumatrapdf-vc2010.vcxproj", "{9458F693-A9CC-4786-B79A-A2103EC71FA3}"
 EndProject
-Project("{0E96FCFA-9DAC-4534-AC18-01A90C368873}") = "Installer", "installer-vc2010.vcxproj", "{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}"
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "Installer", "installer-vc2010.vcxproj", "{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}"
 EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Win32 = Debug|Win32
+		Debug|x64 = Debug|x64
 		Release analyze|Win32 = Release analyze|Win32
+		Release analyze|x64 = Release analyze|x64
 		Release|Win32 = Release|Win32
+		Release|x64 = Release|x64
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Debug|Win32.ActiveCfg = Debug|Win32
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Debug|Win32.Build.0 = Debug|Win32
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Debug|x64.ActiveCfg = Debug|x64
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Debug|x64.Build.0 = Debug|x64
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release analyze|Win32.ActiveCfg = Release analyze|Win32
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release analyze|Win32.Build.0 = Release analyze|Win32
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release analyze|x64.ActiveCfg = Release analyze|x64
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release analyze|x64.Build.0 = Release analyze|x64
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release|Win32.ActiveCfg = Release|Win32
 		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release|Win32.Build.0 = Release|Win32
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release|x64.ActiveCfg = Release|x64
+		{9458F693-A9CC-4786-B79A-A2103EC71FA3}.Release|x64.Build.0 = Release|x64
 		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Debug|Win32.ActiveCfg = Debug|Win32
+		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Debug|x64.ActiveCfg = Debug|x64
 		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Release analyze|Win32.ActiveCfg = Release analyze|Win32
+		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Release analyze|x64.ActiveCfg = Release analyze|x64
 		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Release|Win32.ActiveCfg = Release|Win32
+		{BC42DA91-3BE7-410E-8ACE-E5F42DEDF41B}.Release|x64.ActiveCfg = Release|x64
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
Index: vs/sumatrapdf-vc2010.vcxproj
===================================================================
--- vs/sumatrapdf-vc2010.vcxproj	(revision 25)
+++ vs/sumatrapdf-vc2010.vcxproj	(working copy)
@@ -5,14 +5,26 @@
       <Configuration>Debug</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
     <ProjectConfiguration Include="Release analyze|Win32">
       <Configuration>Release analyze</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Release analyze|x64">
+      <Configuration>Release analyze</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
     <ProjectConfiguration Include="Release|Win32">
       <Configuration>Release</Configuration>
       <Platform>Win32</Platform>
     </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
   </ItemGroup>
   <PropertyGroup Label="Globals">
     <ProjectName>sumatrapdf-vc2010</ProjectName>
@@ -24,512 +36,566 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Makefile</ConfigurationType>
   </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>Makefile</ConfigurationType>
+  </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
   </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
   <PropertyGroup Label="UserMacros" />
   <PropertyGroup>
     <_ProjectFileVersion>10.0.30128.1</_ProjectFileVersion>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">..\obj-dbg\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">..\obj-dbg\</OutDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">..\obj-dbg\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">..\obj-dbg\</IntDir>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">nmake -f ..\makefile.msvc BASEDIR=.. CFG=dbg NASM=..\bin\nasm.exe SumatraPDF</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=.. CFG=dbg NASM=..\bin\nasm.exe SumatraPDF</NMakeBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">nmake -f ..\makefile.msvc BASEDIR=..  CFG=dbg  NASM=..\bin\nasm.exe rebuild</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=..  CFG=dbg  NASM=..\bin\nasm.exe rebuild</NMakeReBuildCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">nmake -f ..\makefile.msvc BASEDIR=..  CFG=dbg  NASM=..\bin\nasm.exe clean</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=..  CFG=dbg  NASM=..\bin\nasm.exe clean</NMakeCleanCommandLine>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">..\obj-dbg\sumatrapdf.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">..\obj-dbg\sumatrapdf.exe</NMakeOutput>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">WIN32;_DEBUG;DEBUG;UNICODE;SYNCTEX_FEATURE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">_DEBUG;DEBUG;UNICODE;SYNCTEX_FEATURE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\src\mui;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\src\mui;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">..\obj-rel\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">..\obj-rel\</OutDir>
     <OutDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">..\obj-rel\</OutDir>
+    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">..\obj-rel\</OutDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">..\obj-rel\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">..\obj-rel\</IntDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">..\obj-rel\</IntDir>
+    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">..\obj-rel\</IntDir>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">nmake -f ..\makefile.msvc BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe</NMakeBuildCommandLine>
     <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe WITH_ANALYZE=yes</NMakeBuildCommandLine>
+    <NMakeBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe WITH_ANALYZE=yes</NMakeBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">nmake -f ..\makefile.msvc BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe rebuild</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe rebuild</NMakeReBuildCommandLine>
     <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe  WITH_ANALYZE=yes rebuild</NMakeReBuildCommandLine>
+    <NMakeReBuildCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe  WITH_ANALYZE=yes rebuild</NMakeReBuildCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">nmake -f ..\makefile.msvc  BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe clean</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release|x64'">nmake -f ..\makefile.msvc PLATFORM=X64 BASEDIR=.. CFG=rel  NASM=..\bin\nasm.exe clean</NMakeCleanCommandLine>
     <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe  WITH_ANALYZE=yes clean</NMakeCleanCommandLine>
+    <NMakeCleanCommandLine Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">cd .. &amp;&amp; nmake -f makefile.msvc CFG=rel  NASM=bin\nasm.exe  WITH_ANALYZE=yes clean</NMakeCleanCommandLine>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">..\obj-rel\sumatrapdf.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">..\obj-rel\sumatrapdf.exe</NMakeOutput>
     <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">..\obj-rel\sumatrapdf.exe</NMakeOutput>
+    <NMakeOutput Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">..\obj-rel\sumatrapdf.exe</NMakeOutput>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">WIN32;NDEBUG;UNICODE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NDEBUG;UNICODE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">WIN32;NDEBUG;UNICODE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
+    <NMakePreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">WIN32;NDEBUG;UNICODE;HAVE_BZIP2;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\mui;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\..\src;$(ProjectDir)\..\src\utils\msvc;$(ProjectDir)\..\src\utils;$(ProjectDir)\..\src\mui;$(ProjectDir)\..\mupdf\fitz;$(ProjectDir)\..\mupdf\pdf;$(ProjectDir)\..\mupdf\xps;$(ProjectDir)\..\ext\libjpeg-turbo;$(ProjectDir)\..\ext\zlib-1.2.5;$(ProjectDir)\..\ext\zlib-1.2.5\minizip;$(ProjectDir)\..\ext\CHMLib\src</NMakeIncludeSearchPath>
     <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeIncludeSearchPath);$(ProjectDir)\src;$(ProjectDir)\src\utils\msvc;$(ProjectDir)\src\utils;$(ProjectDir)\src\mui;$(ProjectDir)\mupdf\fitz;$(ProjectDir)\mupdf\pdf;$(ProjectDir)\mupdf\xps;$(ProjectDir)\ext\libjpeg-turbo;$(ProjectDir)\ext\zlib-1.2.5;$(ProjectDir)\ext\zlib-1.2.5\minizip;$(ProjectDir)\ext\CHMLib\src</NMakeIncludeSearchPath>
+    <NMakeIncludeSearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeIncludeSearchPath);$(ProjectDir)\src;$(ProjectDir)\src\utils\msvc;$(ProjectDir)\src\utils;$(ProjectDir)\src\mui;$(ProjectDir)\mupdf\fitz;$(ProjectDir)\mupdf\pdf;$(ProjectDir)\mupdf\xps;$(ProjectDir)\ext\libjpeg-turbo;$(ProjectDir)\ext\zlib-1.2.5;$(ProjectDir)\ext\zlib-1.2.5\minizip;$(ProjectDir)\ext\CHMLib\src</NMakeIncludeSearchPath>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
+    <NMakeForcedIncludes Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeForcedIncludes)</NMakeForcedIncludes>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
+    <NMakeAssemblySearchPath Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeAssemblySearchPath)</NMakeAssemblySearchPath>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
     <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
+    <NMakeForcedUsingAssemblies Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(NMakeForcedUsingAssemblies)</NMakeForcedUsingAssemblies>
     <IncludePath Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(ProjectDir)..\ext\zlib;$(ProjectDir)..\ext\zlib\minizip;$(ProjectDir)..\src\mui;$(IncludePath)</IncludePath>
+    <IncludePath Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(ProjectDir)..\ext\zlib;$(ProjectDir)..\ext\zlib\minizip;$(ProjectDir)..\src\mui;$(IncludePath)</IncludePath>
     <IncludePath Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(ProjectDir)..\ext\zlib;$(ProjectDir)..\ext\zlib\minizip;$(ProjectDir)..\src\mui;$(IncludePath)</IncludePath>
+    <IncludePath Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(ProjectDir)..\ext\zlib;$(ProjectDir)..\ext\zlib\minizip;$(ProjectDir)..\src\mui;$(IncludePath)</IncludePath>
     <IncludePath Condition="'$(Configuration)|$(Platform)'=='Release analyze|Win32'">$(ProjectDir)ext\zlib;$(ProjectDir)ext\zlib\minizip;$(ProjectDir)src\mui;$(IncludePath)</IncludePath>
+    <IncludePath Condition="'$(Configuration)|$(Platform)'=='Release analyze|x64'">$(ProjectDir)ext\zlib;$(ProjectDir)ext\zlib\minizip;$(ProjectDir)src\mui;$(IncludePath)</IncludePath>
   </PropertyGroup>
   <ItemDefinitionGroup>
   </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="..\src\AppPrefs.cpp" />
-    <ClCompile Include="..\src\AppTools.cpp" />
-    <ClCompile Include="..\src\CrashHandler.cpp" />
-    <ClCompile Include="..\src\DisplayModel.cpp" />
-    <ClCompile Include="..\src\Doc.cpp" />
-    <ClCompile Include="..\src\ExternalPdfViewer.cpp" />
-    <ClCompile Include="..\src\Favorites.cpp" />
-    <ClCompile Include="..\src\FileModifications.cpp" />
-    <ClCompile Include="..\src\HtmlFormatter.cpp" />
-    <ClCompile Include="..\src\Menu.cpp" />
-    <ClCompile Include="..\src\MuPDF_Exports.cpp" />
-    <ClCompile Include="..\src\Notifications.cpp" />
-    <ClCompile Include="..\src\ParseCommandLine.cpp" />
-    <ClCompile Include="..\src\PdfSync.cpp" />
-    <ClCompile Include="..\src\Print.cpp" />
-    <ClCompile Include="..\src\RenderCache.cpp" />
-    <ClCompile Include="..\src\Search.cpp" />
-    <ClCompile Include="..\src\Selection.cpp" />
-    <ClCompile Include="..\src\StressTesting.cpp" />
-    <ClCompile Include="..\src\SumatraAbout.cpp" />
-    <ClCompile Include="..\src\SumatraAbout2.cpp" />
-    <ClCompile Include="..\src\SumatraDialogs.cpp" />
-    <ClCompile Include="..\src\SumatraPDF.cpp" />
-    <ClCompile Include="..\src\SumatraProperties.cpp" />
-    <ClCompile Include="..\src\SumatraStartup.cpp" />
-    <ClCompile Include="..\src\TableOfContents.cpp" />
-    <ClCompile Include="..\src\Tester.cpp" />
-    <ClCompile Include="..\src\TextSearch.cpp" />
-    <ClCompile Include="..\src\TextSelection.cpp" />
-    <ClCompile Include="..\src\Toolbar.cpp" />
-    <ClCompile Include="..\src\Translations.cpp" />
-    <ClCompile Include="..\src\Trans_sumatra_txt.cpp" />
-    <ClCompile Include="..\src\UnitTests.cpp" />
-    <ClCompile Include="..\src\WindowInfo.cpp" />
-    <ClCompile Include="..\src\ChmDoc.cpp" />
-    <ClCompile Include="..\src\ChmEngine.cpp" />
-    <ClCompile Include="..\src\DjVuEngine.cpp" />
-    <ClCompile Include="..\src\EngineDump.cpp" />
-    <ClCompile Include="..\src\ImagesEngine.cpp" />
-    <ClCompile Include="..\src\PdfEngine.cpp" />
-    <ClCompile Include="..\src\PsEngine.cpp" />
-    <ClCompile Include="..\src\EbookController.cpp" />
-    <ClCompile Include="..\src\EbookControls.cpp" />
-    <ClCompile Include="..\src\EbookDoc.cpp" />
-    <ClCompile Include="..\src\EbookEngine.cpp" />
-    <ClCompile Include="..\src\EbookFormatter.cpp" />
-    <ClCompile Include="..\src\EbookWindow.cpp" />
-    <ClCompile Include="..\src\MobiDoc.cpp" />
-    <ClCompile Include="..\src\MuiEbookPageDef.cpp" />
-    <ClCompile Include="..\src\uia\DocumentProvider.cpp" />
-    <ClCompile Include="..\src\uia\PageProvider.cpp" />
-    <ClCompile Include="..\src\uia\Provider.cpp" />
-    <ClCompile Include="..\src\uia\StartPageProvider.cpp" />
-    <ClCompile Include="..\src\uia\TextRange.cpp" />
-    <ClCompile Include="..\src\mui\Mui.cpp" />
-    <ClCompile Include="..\src\mui\MuiBase.cpp" />
-    <ClCompile Include="..\src\mui\MuiButton.cpp" />
-    <ClCompile Include="..\src\mui\MuiControl.cpp" />
-    <ClCompile Include="..\src\mui\MuiCss.cpp" />
-    <ClCompile Include="..\src\mui\MuiDefs.cpp" />
-    <ClCompile Include="..\src\mui\MuiEventMgr.cpp" />
-    <ClCompile Include="..\src\mui\MuiFromText.cpp" />
-    <ClCompile Include="..\src\mui\MuiGrid.cpp" />
-    <ClCompile Include="..\src\mui\MuiHwndWrapper.cpp" />
-    <ClCompile Include="..\src\mui\MuiLayout.cpp" />
-    <ClCompile Include="..\src\mui\MuiPainter.cpp" />
-    <ClCompile Include="..\src\mui\MuiScrollBar.cpp" />
-    <ClCompile Include="..\src\mui\SvgPath.cpp" />
-    <ClCompile Include="..\src\mui\SvgPath_ut.cpp" />
-    <ClCompile Include="..\src\utils\BaseUtil.cpp" />
-    <ClCompile Include="..\src\utils\BencUtil.cpp" />
-    <ClCompile Include="..\src\utils\BencUtil_ut.cpp" />
-    <ClCompile Include="..\src\utils\BitReader.cpp" />
-    <ClCompile Include="..\src\utils\ByteOrderDecoder.cpp" />
-    <ClCompile Include="..\src\utils\ByteOrderDecoder_ut.cpp" />
-    <ClCompile Include="..\src\utils\CmdLineParser.cpp" />
-    <ClCompile Include="..\src\utils\CssParser.cpp" />
-    <ClCompile Include="..\src\utils\CssParser_ut.cpp" />
-    <ClCompile Include="..\src\utils\DbgHelpDyn.cpp" />
-    <ClCompile Include="..\src\utils\DebugLog.cpp" />
-    <ClCompile Include="..\src\utils\DialogSizer.cpp" />
-    <ClCompile Include="..\src\utils\Dict.cpp" />
-    <ClCompile Include="..\src\utils\Dict_ut.cpp" />
-    <ClCompile Include="..\src\utils\DirIter.cpp" />
-    <ClCompile Include="..\src\utils\Experiments.cpp" />
-    <ClCompile Include="..\src\utils\FileTransactions.cpp" />
-    <ClCompile Include="..\src\utils\FileUtil.cpp" />
-    <ClCompile Include="..\src\utils\FileWatcher.cpp" />
-    <ClCompile Include="..\src\utils\GdiPlusUtil.cpp" />
-    <ClCompile Include="..\src\utils\HtmlParserLookup.cpp" />
-    <ClCompile Include="..\src\utils\HtmlPrettyPrint.cpp" />
-    <ClCompile Include="..\src\utils\HtmlPullParser.cpp" />
-    <ClCompile Include="..\src\utils\HtmlPullParser_ut.cpp" />
-    <ClCompile Include="..\src\utils\HtmlWindow.cpp" />
-    <ClCompile Include="..\src\utils\HttpUtil.cpp" />
-    <ClCompile Include="..\src\utils\JsonParser.cpp" />
-    <ClCompile Include="..\src\utils\JsonParser_ut.cpp" />
-    <ClCompile Include="..\src\utils\LzmaSimpleArchive.cpp" />
-    <ClCompile Include="..\src\utils\NoFreeAllocator.cpp" />
-    <ClCompile Include="..\src\utils\PalmDbReader.cpp" />
-    <ClCompile Include="..\src\utils\SerializeTxt.cpp" />
-    <ClCompile Include="..\src\utils\SettingsUtil.cpp" />
-    <ClCompile Include="..\src\utils\SettingsUtil_ut.cpp" />
-    <ClCompile Include="..\src\utils\Sigslot_ut.cpp" />
-    <ClCompile Include="..\src\utils\SquareTreeParser.cpp" />
-    <ClCompile Include="..\src\utils\SquareTreeParser_ut.cpp" />
-    <ClCompile Include="..\src\utils\StrFormat.cpp" />
-    <ClCompile Include="..\src\utils\StrFormat_ut.cpp" />
-    <ClCompile Include="..\src\utils\StrSlice.cpp" />
-    <ClCompile Include="..\src\utils\StrUtil.cpp" />
-    <ClCompile Include="..\src\utils\StrUtil_ut.cpp" />
-    <ClCompile Include="..\src\utils\TgaReader.cpp" />
-    <ClCompile Include="..\src\utils\ThreadUtil.cpp" />
-    <ClCompile Include="..\src\utils\Touch.cpp" />
-    <ClCompile Include="..\src\utils\TrivialHtmlParser.cpp" />
-    <ClCompile Include="..\src\utils\TrivialHtmlParser_ut.cpp" />
-    <ClCompile Include="..\src\utils\TxtParser.cpp" />
-    <ClCompile Include="..\src\utils\UITask.cpp" />
-    <ClCompile Include="..\src\utils\UtilTests.cpp" />
-    <ClCompile Include="..\src\utils\VarintGob.cpp" />
-    <ClCompile Include="..\src\utils\VarintGob_ut.cpp" />
-    <ClCompile Include="..\src\utils\Vec_ut.cpp" />
-    <ClCompile Include="..\src\utils\WinUtil.cpp" />
-    <ClCompile Include="..\src\utils\ZipUtil.cpp" />
-    <ClCompile Include="..\src\browserplugin\npPdfViewer.cpp" />
-    <ClCompile Include="..\src\browserplugin\Trans_browserplugin_txt.cpp" />
-    <ClCompile Include="..\src\ifilter\CPdfFilter.cpp" />
-    <ClCompile Include="..\src\ifilter\CTeXFilter.cpp" />
-    <ClCompile Include="..\src\ifilter\PdfFilterDll.cpp" />
-    <ClCompile Include="..\src\previewer\PdfPreview.cpp" />
-    <ClCompile Include="..\src\previewer\PdfPreviewDll.cpp" />
-    <ClCompile Include="..\src\installer\Install.cpp" />
-    <ClCompile Include="..\src\installer\Installer.cpp" />
-    <ClCompile Include="..\src\installer\Trans_installer_txt.cpp" />
-    <ClCompile Include="..\src\installer\Uninstall.cpp" />
-    <ClCompile Include="..\ext\CHMLib\src\chm_lib.c" />
-    <ClCompile Include="..\ext\CHMLib\src\lzx.c" />
-    <ClCompile Include="..\mupdf\fitz\base_context.c" />
-    <ClCompile Include="..\mupdf\fitz\base_error.c" />
-    <ClCompile Include="..\mupdf\fitz\base_geometry.c" />
-    <ClCompile Include="..\mupdf\fitz\base_getopt.c" />
-    <ClCompile Include="..\mupdf\fitz\base_hash.c" />
-    <ClCompile Include="..\mupdf\fitz\base_memory.c" />
-    <ClCompile Include="..\mupdf\fitz\base_string.c" />
-    <ClCompile Include="..\mupdf\fitz\base_time.c" />
-    <ClCompile Include="..\mupdf\fitz\base_trans.c" />
-    <ClCompile Include="..\mupdf\fitz\base_xml.c" />
-    <ClCompile Include="..\mupdf\fitz\crypt_aes.c" />
-    <ClCompile Include="..\mupdf\fitz\crypt_arc4.c" />
-    <ClCompile Include="..\mupdf\fitz\crypt_md5.c" />
-    <ClCompile Include="..\mupdf\fitz\crypt_sha2.c" />
-    <ClCompile Include="..\mupdf\fitz\dev_bbox.c" />
-    <ClCompile Include="..\mupdf\fitz\dev_gdiplus.cpp" />
-    <ClCompile Include="..\mupdf\fitz\dev_list.c" />
-    <ClCompile Include="..\mupdf\fitz\dev_null.c" />
-    <ClCompile Include="..\mupdf\fitz\dev_trace.c" />
-    <ClCompile Include="..\mupdf\fitz\doc_document.c" />
-    <ClCompile Include="..\mupdf\fitz\doc_interactive.c" />
-    <ClCompile Include="..\mupdf\fitz\doc_link.c" />
-    <ClCompile Include="..\mupdf\fitz\doc_outline.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_basic.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_dctd.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_faxd.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_flate.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_jbig2d.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_lzwd.c" />
-    <ClCompile Include="..\mupdf\fitz\filt_predict.c" />
-    <ClCompile Include="..\mupdf\fitz\image_jpeg.c" />
-    <ClCompile Include="..\mupdf\fitz\image_jpx.c" />
-    <ClCompile Include="..\mupdf\fitz\image_jxr.c" />
-    <ClCompile Include="..\mupdf\fitz\image_md5.c" />
-    <ClCompile Include="..\mupdf\fitz\image_png.c" />
-    <ClCompile Include="..\mupdf\fitz\image_save.c" />
-    <ClCompile Include="..\mupdf\fitz\image_tiff.c" />
-    <ClCompile Include="..\mupdf\fitz\res_bitmap.c" />
-    <ClCompile Include="..\mupdf\fitz\res_colorspace.c" />
-    <ClCompile Include="..\mupdf\fitz\res_font.c" />
-    <ClCompile Include="..\mupdf\fitz\res_func.c" />
-    <ClCompile Include="..\mupdf\fitz\res_halftone.c" />
-    <ClCompile Include="..\mupdf\fitz\res_image.c" />
-    <ClCompile Include="..\mupdf\fitz\res_path.c" />
-    <ClCompile Include="..\mupdf\fitz\res_pixmap.c" />
-    <ClCompile Include="..\mupdf\fitz\res_shade.c" />
-    <ClCompile Include="..\mupdf\fitz\res_store.c" />
-    <ClCompile Include="..\mupdf\fitz\res_text.c" />
-    <ClCompile Include="..\mupdf\fitz\stm_buffer.c" />
-    <ClCompile Include="..\mupdf\fitz\stm_comp_buf.c" />
-    <ClCompile Include="..\mupdf\fitz\stm_open.c" />
-    <ClCompile Include="..\mupdf\fitz\stm_output.c" />
-    <ClCompile Include="..\mupdf\fitz\stm_read.c" />
-    <ClCompile Include="..\mupdf\fitz\text_extract.c" />
-    <ClCompile Include="..\mupdf\fitz\text_output.c" />
-    <ClCompile Include="..\mupdf\fitz\text_paragraph.c" />
-    <ClCompile Include="..\mupdf\fitz\text_search.c" />
-    <ClCompile Include="..\mupdf\draw\draw_affine.c" />
-    <ClCompile Include="..\mupdf\draw\draw_blend.c" />
-    <ClCompile Include="..\mupdf\draw\draw_device.c" />
-    <ClCompile Include="..\mupdf\draw\draw_edge.c" />
-    <ClCompile Include="..\mupdf\draw\draw_glyph.c" />
-    <ClCompile Include="..\mupdf\draw\draw_mesh.c" />
-    <ClCompile Include="..\mupdf\draw\draw_paint.c" />
-    <ClCompile Include="..\mupdf\draw\draw_path.c" />
-    <ClCompile Include="..\mupdf\draw\draw_scale.c" />
-    <ClCompile Include="..\mupdf\draw\draw_simple_scale.c" />
-    <ClCompile Include="..\mupdf\draw\draw_unpack.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_annot.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_cmap.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_cmap_load.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_cmap_parse.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_cmap_table.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_colorspace.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_crypt.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_device.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_encoding.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_event.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_field.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_font.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_fontfile.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_form.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_ft_tools.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_function.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_image.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_interpret.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_js.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_jsimp_cpp.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_jsimp_v8.cpp" />
-    <ClCompile Include="..\mupdf\pdf\pdf_js_none.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_lex.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_metrics.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_nametree.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_object.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_outline.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_page.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_parse.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_pattern.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_repair.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_shade.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_store.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_stream.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_type3.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_unicode.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_write.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_xobject.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_xref.c" />
-    <ClCompile Include="..\mupdf\pdf\pdf_xref_aux.c" />
-    <ClCompile Include="..\mupdf\xps\xps_common.c" />
-    <ClCompile Include="..\mupdf\xps\xps_doc.c" />
-    <ClCompile Include="..\mupdf\xps\xps_glyphs.c" />
-    <ClCompile Include="..\mupdf\xps\xps_gradient.c" />
-    <ClCompile Include="..\mupdf\xps\xps_image.c" />
-    <ClCompile Include="..\mupdf\xps\xps_outline.c" />
-    <ClCompile Include="..\mupdf\xps\xps_path.c" />
-    <ClCompile Include="..\mupdf\xps\xps_resource.c" />
-    <ClCompile Include="..\mupdf\xps\xps_tile.c" />
-    <ClCompile Include="..\mupdf\xps\xps_util.c" />
-    <ClCompile Include="..\mupdf\xps\xps_zip.c" />
-    <ClCompile Include="..\mupdf\apps\jstest_main.c" />
-    <ClCompile Include="..\mupdf\apps\mudraw.c" />
-    <ClCompile Include="..\mupdf\apps\mutool.c" />
-    <ClCompile Include="..\mupdf\apps\pdfapp.c" />
-    <ClCompile Include="..\mupdf\apps\pdfclean.c" />
-    <ClCompile Include="..\mupdf\apps\pdfextract.c" />
-    <ClCompile Include="..\mupdf\apps\pdfinfo.c" />
-    <ClCompile Include="..\mupdf\apps\pdfposter.c" />
-    <ClCompile Include="..\mupdf\apps\pdfshow.c" />
-    <ClCompile Include="..\mupdf\apps\win_main.c" />
-    <ClCompile Include="..\mupdf\apps\x11_image.c" />
-    <ClCompile Include="..\mupdf\apps\x11_main.c" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="..\src\AppPrefs.h" />
-    <ClInclude Include="..\src\AppTools.h" />
-    <ClInclude Include="..\src\CrashHandler.h" />
-    <ClInclude Include="..\src\DisplayModel.h" />
-    <ClInclude Include="..\src\DisplayState.h" />
-    <ClInclude Include="..\src\Doc.h" />
-    <ClInclude Include="..\src\ExternalPdfViewer.h" />
-    <ClInclude Include="..\src\Favorites.h" />
-    <ClInclude Include="..\src\FileHistory.h" />
-    <ClInclude Include="..\src\FileModifications.h" />
-    <ClInclude Include="..\src\HtmlFormatter.h" />
-    <ClInclude Include="..\src\Menu.h" />
-    <ClInclude Include="..\src\Notifications.h" />
-    <ClInclude Include="..\src\ParseCommandLine.h" />
-    <ClInclude Include="..\src\PdfSync.h" />
-    <ClInclude Include="..\src\Print.h" />
-    <ClInclude Include="..\src\RenderCache.h" />
-    <ClInclude Include="..\src\resource.h" />
-    <ClInclude Include="..\src\Search.h" />
-    <ClInclude Include="..\src\Selection.h" />
-    <ClInclude Include="..\src\SettingsStructs.h" />
-    <ClInclude Include="..\src\StressTesting.h" />
-    <ClInclude Include="..\src\SumatraAbout.h" />
-    <ClInclude Include="..\src\SumatraAbout2.h" />
-    <ClInclude Include="..\src\SumatraDialogs.h" />
-    <ClInclude Include="..\src\SumatraPDF.h" />
-    <ClInclude Include="..\src\SumatraProperties.h" />
-    <ClInclude Include="..\src\SumatraWindow.h" />
-    <ClInclude Include="..\src\TableOfContents.h" />
-    <ClInclude Include="..\src\TextSearch.h" />
-    <ClInclude Include="..\src\TextSelection.h" />
-    <ClInclude Include="..\src\Toolbar.h" />
-    <ClInclude Include="..\src\Translations.h" />
-    <ClInclude Include="..\src\Version.h" />
-    <ClInclude Include="..\src\WindowInfo.h" />
-    <ClInclude Include="..\src\BaseEngine.h" />
-    <ClInclude Include="..\src\ChmDoc.h" />
-    <ClInclude Include="..\src\ChmEngine.h" />
-    <ClInclude Include="..\src\DjVuEngine.h" />
-    <ClInclude Include="..\src\ImagesEngine.h" />
-    <ClInclude Include="..\src\PdfEngine.h" />
-    <ClInclude Include="..\src\PsEngine.h" />
-    <ClInclude Include="..\src\EbookBase.h" />
-    <ClInclude Include="..\src\EbookController.h" />
-    <ClInclude Include="..\src\EbookControls.h" />
-    <ClInclude Include="..\src\EbookDoc.h" />
-    <ClInclude Include="..\src\EbookEngine.h" />
-    <ClInclude Include="..\src\EbookFormatter.h" />
-    <ClInclude Include="..\src\EbookWindow.h" />
-    <ClInclude Include="..\src\MobiDoc.h" />
-    <ClInclude Include="..\src\MuiEbookPageDef.h" />
-    <ClInclude Include="..\src\uia\Constants.h" />
-    <ClInclude Include="..\src\uia\DocumentProvider.h" />
-    <ClInclude Include="..\src\uia\PageProvider.h" />
-    <ClInclude Include="..\src\uia\Provider.h" />
-    <ClInclude Include="..\src\uia\StartPageProvider.h" />
-    <ClInclude Include="..\src\uia\TextRange.h" />
-    <ClInclude Include="..\src\mui\Mui.h" />
-    <ClInclude Include="..\src\mui\MuiBase.h" />
-    <ClInclude Include="..\src\mui\MuiButton.h" />
-    <ClInclude Include="..\src\mui\MuiControl.h" />
-    <ClInclude Include="..\src\mui\MuiCss.h" />
-    <ClInclude Include="..\src\mui\MuiDefs.h" />
-    <ClInclude Include="..\src\mui\MuiEventMgr.h" />
-    <ClInclude Include="..\src\mui\MuiFromText.h" />
-    <ClInclude Include="..\src\mui\MuiGrid.h" />
-    <ClInclude Include="..\src\mui\MuiHwndWrapper.h" />
-    <ClInclude Include="..\src\mui\MuiLayout.h" />
-    <ClInclude Include="..\src\mui\MuiPainter.h" />
-    <ClInclude Include="..\src\mui\MuiScrollBar.h" />
-    <ClInclude Include="..\src\mui\SvgPath.h" />
-    <ClInclude Include="..\src\utils\Allocator.h" />
-    <ClInclude Include="..\src\utils\BaseUtil.h" />
-    <ClInclude Include="..\src\utils\BencUtil.h" />
-    <ClInclude Include="..\src\utils\BitManip.h" />
-    <ClInclude Include="..\src\utils\BitReader.h" />
-    <ClInclude Include="..\src\utils\ByteOrderDecoder.h" />
-    <ClInclude Include="..\src\utils\ByteReader.h" />
-    <ClInclude Include="..\src\utils\CmdLineParser.h" />
-    <ClInclude Include="..\src\utils\CssParser.h" />
-    <ClInclude Include="..\src\utils\DbgHelpDyn.h" />
-    <ClInclude Include="..\src\utils\DebugLog.h" />
-    <ClInclude Include="..\src\utils\DialogSizer.h" />
-    <ClInclude Include="..\src\utils\Dict.h" />
-    <ClInclude Include="..\src\utils\DirIter.h" />
-    <ClInclude Include="..\src\utils\FileTransactions.h" />
-    <ClInclude Include="..\src\utils\FileUtil.h" />
-    <ClInclude Include="..\src\utils\FileWatcher.h" />
-    <ClInclude Include="..\src\utils\FrameTimeoutCalculator.h" />
-    <ClInclude Include="..\src\utils\GdiPlusUtil.h" />
-    <ClInclude Include="..\src\utils\GeomUtil.h" />
-    <ClInclude Include="..\src\utils\HtmlParserLookup.h" />
-    <ClInclude Include="..\src\utils\HtmlPrettyPrint.h" />
-    <ClInclude Include="..\src\utils\HtmlPullParser.h" />
-    <ClInclude Include="..\src\utils\HtmlWindow.h" />
-    <ClInclude Include="..\src\utils\HttpUtil.h" />
-    <ClInclude Include="..\src\utils\JsonParser.h" />
-    <ClInclude Include="..\src\utils\LzmaSimpleArchive.h" />
-    <ClInclude Include="..\src\utils\NoFreeAllocator.h" />
-    <ClInclude Include="..\src\utils\PalmDbReader.h" />
-    <ClInclude Include="..\src\utils\RefCounted.h" />
-    <ClInclude Include="..\src\utils\Scoped.h" />
-    <ClInclude Include="..\src\utils\SerializeTxt.h" />
-    <ClInclude Include="..\src\utils\SettingsUtil.h" />
-    <ClInclude Include="..\src\utils\Sigslot.h" />
-    <ClInclude Include="..\src\utils\SimpleLog.h" />
-    <ClInclude Include="..\src\utils\SquareTreeParser.h" />
-    <ClInclude Include="..\src\utils\StrFormat.h" />
-    <ClInclude Include="..\src\utils\StrHash.h" />
-    <ClInclude Include="..\src\utils\StrSlice.h" />
-    <ClInclude Include="..\src\utils\StrUtil.h" />
-    <ClInclude Include="..\src\utils\TgaReader.h" />
-    <ClInclude Include="..\src\utils\ThreadUtil.h" />
-    <ClInclude Include="..\src\utils\Timer.h" />
-    <ClInclude Include="..\src\utils\Touch.h" />
-    <ClInclude Include="..\src\utils\TrivialHtmlParser.h" />
-    <ClInclude Include="..\src\utils\TxtParser.h" />
-    <ClInclude Include="..\src\utils\UITask.h" />
-    <ClInclude Include="..\src\utils\VarintGob.h" />
-    <ClInclude Include="..\src\utils\Vec.h" />
-    <ClInclude Include="..\src\utils\VecSegmented.h" />
-    <ClInclude Include="..\src\utils\WinUtil.h" />
-    <ClInclude Include="..\src\utils\ZipUtil.h" />
-    <ClInclude Include="..\src\browserplugin\npapi\npapi.h" />
-    <ClInclude Include="..\src\browserplugin\npapi\npfunctions.h" />
-    <ClInclude Include="..\src\browserplugin\npapi\npruntime.h" />
-    <ClInclude Include="..\src\browserplugin\npapi\nptypes.h" />
-    <ClInclude Include="..\src\ifilter\CPdfFilter.h" />
-    <ClInclude Include="..\src\ifilter\CTeXFilter.h" />
-    <ClInclude Include="..\src\ifilter\FilterBase.h" />
-    <ClInclude Include="..\src\ifilter\PdfFilter.h" />
-    <ClInclude Include="..\src\previewer\PdfPreview.h" />
-    <ClInclude Include="..\src\installer\Installer.h" />
-    <ClInclude Include="..\src\installer\Resource.h" />
-    <ClInclude Include="..\ext\CHMLib\src\chm_lib.h" />
-    <ClInclude Include="..\ext\CHMLib\src\lzx.h" />
-    <ClInclude Include="..\mupdf\fitz\fitz-internal.h" />
-    <ClInclude Include="..\mupdf\fitz\fitz.h" />
-    <ClInclude Include="..\mupdf\pdf\data_encodings.h" />
-    <ClInclude Include="..\mupdf\pdf\data_glyphlist.h" />
-    <ClInclude Include="..\mupdf\pdf\mupdf-internal.h" />
-    <ClInclude Include="..\mupdf\pdf\mupdf.h" />
-    <ClInclude Include="..\mupdf\pdf\pdf_jsimp_cpp.h" />
-    <ClInclude Include="..\mupdf\xps\muxps-internal.h" />
-    <ClInclude Include="..\mupdf\xps\muxps.h" />
-    <ClInclude Include="..\mupdf\apps\pdfapp.h" />
-  </ItemGroup>
-  <ItemGroup>
-    <Manifest Include="..\src\installer\Installer.exe.manifest" />
-  </ItemGroup>
-  <ItemGroup>
-    <None Include="..\src\EbookWinDesc.txt" />
-    <None Include="..\src\mui\mui-todo.txt" />
-    <None Include="..\docs\codingstyle.txt" />
-    <None Include="..\docs\mui-html-fusion.txt" />
-    <None Include="..\docs\releasenotes.txt" />
-    <None Include="..\docs\releaseplan.txt" />
-    <None Include="..\docs\SumatraPDF-user.ini" />
-    <None Include="..\docs\sumatrapdfrestrict.ini" />
-    <None Include="..\docs\wishlist.txt" />
-    <None Include="..\src\dragcursor.cur" />
-    <None Include="..\src\PdfDoc.ico" />
-    <None Include="..\src\reloading.bmp" />
-    <None Include="..\src\SumatraPDF-smaller.ico" />
-    <None Include="..\src\SumatraPDF.ico" />
-    <None Include="..\src\toolbar_11.bmp" />
-  </ItemGroup>
-  <ItemGroup>
-    <ResourceCompile Include="..\src\browserplugin\npPdfViewer.rc" />
-    <ResourceCompile Include="..\src\libmupdf.rc" />
-    <ResourceCompile Include="..\src\SumatraPDF.rc" />
-    <ResourceCompile Include="..\src\ifilter\PdfFilter.rc" />
-    <ResourceCompile Include="..\src\previewer\PdfPreview.rc" />
-    <ResourceCompile Include="..\src\installer\Installer.rc" />
+  <ItemGroup>
+    <ClCompile Include="..\src\AppPrefs.cpp" />
+    <ClCompile Include="..\src\AppTools.cpp" />
+    <ClCompile Include="..\src\CrashHandler.cpp" />
+    <ClCompile Include="..\src\DisplayModel.cpp" />
+    <ClCompile Include="..\src\Doc.cpp" />
+    <ClCompile Include="..\src\ExternalPdfViewer.cpp" />
+    <ClCompile Include="..\src\Favorites.cpp" />
+    <ClCompile Include="..\src\FileModifications.cpp" />
+    <ClCompile Include="..\src\HtmlFormatter.cpp" />
+    <ClCompile Include="..\src\Menu.cpp" />
+    <ClCompile Include="..\src\MuPDF_Exports.cpp" />
+    <ClCompile Include="..\src\Notifications.cpp" />
+    <ClCompile Include="..\src\ParseCommandLine.cpp" />
+    <ClCompile Include="..\src\PdfSync.cpp" />
+    <ClCompile Include="..\src\Print.cpp" />
+    <ClCompile Include="..\src\RenderCache.cpp" />
+    <ClCompile Include="..\src\Search.cpp" />
+    <ClCompile Include="..\src\Selection.cpp" />
+    <ClCompile Include="..\src\StressTesting.cpp" />
+    <ClCompile Include="..\src\SumatraAbout.cpp" />
+    <ClCompile Include="..\src\SumatraAbout2.cpp" />
+    <ClCompile Include="..\src\SumatraDialogs.cpp" />
+    <ClCompile Include="..\src\SumatraPDF.cpp" />
+    <ClCompile Include="..\src\SumatraProperties.cpp" />
+    <ClCompile Include="..\src\SumatraStartup.cpp" />
+    <ClCompile Include="..\src\TableOfContents.cpp" />
+    <ClCompile Include="..\src\Tester.cpp" />
+    <ClCompile Include="..\src\TextSearch.cpp" />
+    <ClCompile Include="..\src\TextSelection.cpp" />
+    <ClCompile Include="..\src\Toolbar.cpp" />
+    <ClCompile Include="..\src\Translations.cpp" />
+    <ClCompile Include="..\src\Trans_sumatra_txt.cpp" />
+    <ClCompile Include="..\src\UnitTests.cpp" />
+    <ClCompile Include="..\src\WindowInfo.cpp" />
+    <ClCompile Include="..\src\ChmDoc.cpp" />
+    <ClCompile Include="..\src\ChmEngine.cpp" />
+    <ClCompile Include="..\src\DjVuEngine.cpp" />
+    <ClCompile Include="..\src\EngineDump.cpp" />
+    <ClCompile Include="..\src\ImagesEngine.cpp" />
+    <ClCompile Include="..\src\PdfEngine.cpp" />
+    <ClCompile Include="..\src\PsEngine.cpp" />
+    <ClCompile Include="..\src\EbookController.cpp" />
+    <ClCompile Include="..\src\EbookControls.cpp" />
+    <ClCompile Include="..\src\EbookDoc.cpp" />
+    <ClCompile Include="..\src\EbookEngine.cpp" />
+    <ClCompile Include="..\src\EbookFormatter.cpp" />
+    <ClCompile Include="..\src\EbookWindow.cpp" />
+    <ClCompile Include="..\src\MobiDoc.cpp" />
+    <ClCompile Include="..\src\MuiEbookPageDef.cpp" />
+    <ClCompile Include="..\src\uia\DocumentProvider.cpp" />
+    <ClCompile Include="..\src\uia\PageProvider.cpp" />
+    <ClCompile Include="..\src\uia\Provider.cpp" />
+    <ClCompile Include="..\src\uia\StartPageProvider.cpp" />
+    <ClCompile Include="..\src\uia\TextRange.cpp" />
+    <ClCompile Include="..\src\mui\Mui.cpp" />
+    <ClCompile Include="..\src\mui\MuiBase.cpp" />
+    <ClCompile Include="..\src\mui\MuiButton.cpp" />
+    <ClCompile Include="..\src\mui\MuiControl.cpp" />
+    <ClCompile Include="..\src\mui\MuiCss.cpp" />
+    <ClCompile Include="..\src\mui\MuiDefs.cpp" />
+    <ClCompile Include="..\src\mui\MuiEventMgr.cpp" />
+    <ClCompile Include="..\src\mui\MuiFromText.cpp" />
+    <ClCompile Include="..\src\mui\MuiGrid.cpp" />
+    <ClCompile Include="..\src\mui\MuiHwndWrapper.cpp" />
+    <ClCompile Include="..\src\mui\MuiLayout.cpp" />
+    <ClCompile Include="..\src\mui\MuiPainter.cpp" />
+    <ClCompile Include="..\src\mui\MuiScrollBar.cpp" />
+    <ClCompile Include="..\src\mui\SvgPath.cpp" />
+    <ClCompile Include="..\src\mui\SvgPath_ut.cpp" />
+    <ClCompile Include="..\src\utils\BaseUtil.cpp" />
+    <ClCompile Include="..\src\utils\BencUtil.cpp" />
+    <ClCompile Include="..\src\utils\BencUtil_ut.cpp" />
+    <ClCompile Include="..\src\utils\BitReader.cpp" />
+    <ClCompile Include="..\src\utils\ByteOrderDecoder.cpp" />
+    <ClCompile Include="..\src\utils\ByteOrderDecoder_ut.cpp" />
+    <ClCompile Include="..\src\utils\CmdLineParser.cpp" />
+    <ClCompile Include="..\src\utils\CssParser.cpp" />
+    <ClCompile Include="..\src\utils\CssParser_ut.cpp" />
+    <ClCompile Include="..\src\utils\DbgHelpDyn.cpp" />
+    <ClCompile Include="..\src\utils\DebugLog.cpp" />
+    <ClCompile Include="..\src\utils\DialogSizer.cpp" />
+    <ClCompile Include="..\src\utils\Dict.cpp" />
+    <ClCompile Include="..\src\utils\Dict_ut.cpp" />
+    <ClCompile Include="..\src\utils\DirIter.cpp" />
+    <ClCompile Include="..\src\utils\Experiments.cpp" />
+    <ClCompile Include="..\src\utils\FileTransactions.cpp" />
+    <ClCompile Include="..\src\utils\FileUtil.cpp" />
+    <ClCompile Include="..\src\utils\FileWatcher.cpp" />
+    <ClCompile Include="..\src\utils\GdiPlusUtil.cpp" />
+    <ClCompile Include="..\src\utils\HtmlParserLookup.cpp" />
+    <ClCompile Include="..\src\utils\HtmlPrettyPrint.cpp" />
+    <ClCompile Include="..\src\utils\HtmlPullParser.cpp" />
+    <ClCompile Include="..\src\utils\HtmlPullParser_ut.cpp" />
+    <ClCompile Include="..\src\utils\HtmlWindow.cpp" />
+    <ClCompile Include="..\src\utils\HttpUtil.cpp" />
+    <ClCompile Include="..\src\utils\JsonParser.cpp" />
+    <ClCompile Include="..\src\utils\JsonParser_ut.cpp" />
+    <ClCompile Include="..\src\utils\LzmaSimpleArchive.cpp" />
+    <ClCompile Include="..\src\utils\NoFreeAllocator.cpp" />
+    <ClCompile Include="..\src\utils\PalmDbReader.cpp" />
+    <ClCompile Include="..\src\utils\SerializeTxt.cpp" />
+    <ClCompile Include="..\src\utils\SettingsUtil.cpp" />
+    <ClCompile Include="..\src\utils\SettingsUtil_ut.cpp" />
+    <ClCompile Include="..\src\utils\Sigslot_ut.cpp" />
+    <ClCompile Include="..\src\utils\SquareTreeParser.cpp" />
+    <ClCompile Include="..\src\utils\SquareTreeParser_ut.cpp" />
+    <ClCompile Include="..\src\utils\StrFormat.cpp" />
+    <ClCompile Include="..\src\utils\StrFormat_ut.cpp" />
+    <ClCompile Include="..\src\utils\StrSlice.cpp" />
+    <ClCompile Include="..\src\utils\StrUtil.cpp" />
+    <ClCompile Include="..\src\utils\StrUtil_ut.cpp" />
+    <ClCompile Include="..\src\utils\TgaReader.cpp" />
+    <ClCompile Include="..\src\utils\ThreadUtil.cpp" />
+    <ClCompile Include="..\src\utils\Touch.cpp" />
+    <ClCompile Include="..\src\utils\TrivialHtmlParser.cpp" />
+    <ClCompile Include="..\src\utils\TrivialHtmlParser_ut.cpp" />
+    <ClCompile Include="..\src\utils\TxtParser.cpp" />
+    <ClCompile Include="..\src\utils\UITask.cpp" />
+    <ClCompile Include="..\src\utils\UtilTests.cpp" />
+    <ClCompile Include="..\src\utils\VarintGob.cpp" />
+    <ClCompile Include="..\src\utils\VarintGob_ut.cpp" />
+    <ClCompile Include="..\src\utils\Vec_ut.cpp" />
+    <ClCompile Include="..\src\utils\WinUtil.cpp" />
+    <ClCompile Include="..\src\utils\ZipUtil.cpp" />
+    <ClCompile Include="..\src\browserplugin\npPdfViewer.cpp" />
+    <ClCompile Include="..\src\browserplugin\Trans_browserplugin_txt.cpp" />
+    <ClCompile Include="..\src\ifilter\CPdfFilter.cpp" />
+    <ClCompile Include="..\src\ifilter\CTeXFilter.cpp" />
+    <ClCompile Include="..\src\ifilter\PdfFilterDll.cpp" />
+    <ClCompile Include="..\src\previewer\PdfPreview.cpp" />
+    <ClCompile Include="..\src\previewer\PdfPreviewDll.cpp" />
+    <ClCompile Include="..\src\installer\Install.cpp" />
+    <ClCompile Include="..\src\installer\Installer.cpp" />
+    <ClCompile Include="..\src\installer\Trans_installer_txt.cpp" />
+    <ClCompile Include="..\src\installer\Uninstall.cpp" />
+    <ClCompile Include="..\ext\CHMLib\src\chm_lib.c" />
+    <ClCompile Include="..\ext\CHMLib\src\lzx.c" />
+    <ClCompile Include="..\mupdf\fitz\base_context.c" />
+    <ClCompile Include="..\mupdf\fitz\base_error.c" />
+    <ClCompile Include="..\mupdf\fitz\base_geometry.c" />
+    <ClCompile Include="..\mupdf\fitz\base_getopt.c" />
+    <ClCompile Include="..\mupdf\fitz\base_hash.c" />
+    <ClCompile Include="..\mupdf\fitz\base_memory.c" />
+    <ClCompile Include="..\mupdf\fitz\base_string.c" />
+    <ClCompile Include="..\mupdf\fitz\base_time.c" />
+    <ClCompile Include="..\mupdf\fitz\base_trans.c" />
+    <ClCompile Include="..\mupdf\fitz\base_xml.c" />
+    <ClCompile Include="..\mupdf\fitz\crypt_aes.c" />
+    <ClCompile Include="..\mupdf\fitz\crypt_arc4.c" />
+    <ClCompile Include="..\mupdf\fitz\crypt_md5.c" />
+    <ClCompile Include="..\mupdf\fitz\crypt_sha2.c" />
+    <ClCompile Include="..\mupdf\fitz\dev_bbox.c" />
+    <ClCompile Include="..\mupdf\fitz\dev_gdiplus.cpp" />
+    <ClCompile Include="..\mupdf\fitz\dev_list.c" />
+    <ClCompile Include="..\mupdf\fitz\dev_null.c" />
+    <ClCompile Include="..\mupdf\fitz\dev_trace.c" />
+    <ClCompile Include="..\mupdf\fitz\doc_document.c" />
+    <ClCompile Include="..\mupdf\fitz\doc_interactive.c" />
+    <ClCompile Include="..\mupdf\fitz\doc_link.c" />
+    <ClCompile Include="..\mupdf\fitz\doc_outline.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_basic.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_dctd.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_faxd.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_flate.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_jbig2d.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_lzwd.c" />
+    <ClCompile Include="..\mupdf\fitz\filt_predict.c" />
+    <ClCompile Include="..\mupdf\fitz\image_jpeg.c" />
+    <ClCompile Include="..\mupdf\fitz\image_jpx.c" />
+    <ClCompile Include="..\mupdf\fitz\image_jxr.c" />
+    <ClCompile Include="..\mupdf\fitz\image_md5.c" />
+    <ClCompile Include="..\mupdf\fitz\image_png.c" />
+    <ClCompile Include="..\mupdf\fitz\image_save.c" />
+    <ClCompile Include="..\mupdf\fitz\image_tiff.c" />
+    <ClCompile Include="..\mupdf\fitz\res_bitmap.c" />
+    <ClCompile Include="..\mupdf\fitz\res_colorspace.c" />
+    <ClCompile Include="..\mupdf\fitz\res_font.c" />
+    <ClCompile Include="..\mupdf\fitz\res_func.c" />
+    <ClCompile Include="..\mupdf\fitz\res_halftone.c" />
+    <ClCompile Include="..\mupdf\fitz\res_image.c" />
+    <ClCompile Include="..\mupdf\fitz\res_path.c" />
+    <ClCompile Include="..\mupdf\fitz\res_pixmap.c" />
+    <ClCompile Include="..\mupdf\fitz\res_shade.c" />
+    <ClCompile Include="..\mupdf\fitz\res_store.c" />
+    <ClCompile Include="..\mupdf\fitz\res_text.c" />
+    <ClCompile Include="..\mupdf\fitz\stm_buffer.c" />
+    <ClCompile Include="..\mupdf\fitz\stm_comp_buf.c" />
+    <ClCompile Include="..\mupdf\fitz\stm_open.c" />
+    <ClCompile Include="..\mupdf\fitz\stm_output.c" />
+    <ClCompile Include="..\mupdf\fitz\stm_read.c" />
+    <ClCompile Include="..\mupdf\fitz\text_extract.c" />
+    <ClCompile Include="..\mupdf\fitz\text_output.c" />
+    <ClCompile Include="..\mupdf\fitz\text_paragraph.c" />
+    <ClCompile Include="..\mupdf\fitz\text_search.c" />
+    <ClCompile Include="..\mupdf\draw\draw_affine.c" />
+    <ClCompile Include="..\mupdf\draw\draw_blend.c" />
+    <ClCompile Include="..\mupdf\draw\draw_device.c" />
+    <ClCompile Include="..\mupdf\draw\draw_edge.c" />
+    <ClCompile Include="..\mupdf\draw\draw_glyph.c" />
+    <ClCompile Include="..\mupdf\draw\draw_mesh.c" />
+    <ClCompile Include="..\mupdf\draw\draw_paint.c" />
+    <ClCompile Include="..\mupdf\draw\draw_path.c" />
+    <ClCompile Include="..\mupdf\draw\draw_scale.c" />
+    <ClCompile Include="..\mupdf\draw\draw_simple_scale.c" />
+    <ClCompile Include="..\mupdf\draw\draw_unpack.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_annot.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_cmap.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_cmap_load.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_cmap_parse.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_cmap_table.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_colorspace.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_crypt.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_device.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_encoding.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_event.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_field.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_font.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_fontfile.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_form.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_ft_tools.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_function.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_image.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_interpret.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_js.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_jsimp_cpp.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_jsimp_v8.cpp" />
+    <ClCompile Include="..\mupdf\pdf\pdf_js_none.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_lex.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_metrics.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_nametree.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_object.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_outline.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_page.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_parse.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_pattern.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_repair.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_shade.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_store.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_stream.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_type3.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_unicode.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_write.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_xobject.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_xref.c" />
+    <ClCompile Include="..\mupdf\pdf\pdf_xref_aux.c" />
+    <ClCompile Include="..\mupdf\xps\xps_common.c" />
+    <ClCompile Include="..\mupdf\xps\xps_doc.c" />
+    <ClCompile Include="..\mupdf\xps\xps_glyphs.c" />
+    <ClCompile Include="..\mupdf\xps\xps_gradient.c" />
+    <ClCompile Include="..\mupdf\xps\xps_image.c" />
+    <ClCompile Include="..\mupdf\xps\xps_outline.c" />
+    <ClCompile Include="..\mupdf\xps\xps_path.c" />
+    <ClCompile Include="..\mupdf\xps\xps_resource.c" />
+    <ClCompile Include="..\mupdf\xps\xps_tile.c" />
+    <ClCompile Include="..\mupdf\xps\xps_util.c" />
+    <ClCompile Include="..\mupdf\xps\xps_zip.c" />
+    <ClCompile Include="..\mupdf\apps\jstest_main.c" />
+    <ClCompile Include="..\mupdf\apps\mudraw.c" />
+    <ClCompile Include="..\mupdf\apps\mutool.c" />
+    <ClCompile Include="..\mupdf\apps\pdfapp.c" />
+    <ClCompile Include="..\mupdf\apps\pdfclean.c" />
+    <ClCompile Include="..\mupdf\apps\pdfextract.c" />
+    <ClCompile Include="..\mupdf\apps\pdfinfo.c" />
+    <ClCompile Include="..\mupdf\apps\pdfposter.c" />
+    <ClCompile Include="..\mupdf\apps\pdfshow.c" />
+    <ClCompile Include="..\mupdf\apps\win_main.c" />
+    <ClCompile Include="..\mupdf\apps\x11_image.c" />
+    <ClCompile Include="..\mupdf\apps\x11_main.c" />
   </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\src\AppPrefs.h" />
+    <ClInclude Include="..\src\AppTools.h" />
+    <ClInclude Include="..\src\CrashHandler.h" />
+    <ClInclude Include="..\src\DisplayModel.h" />
+    <ClInclude Include="..\src\DisplayState.h" />
+    <ClInclude Include="..\src\Doc.h" />
+    <ClInclude Include="..\src\ExternalPdfViewer.h" />
+    <ClInclude Include="..\src\Favorites.h" />
+    <ClInclude Include="..\src\FileHistory.h" />
+    <ClInclude Include="..\src\FileModifications.h" />
+    <ClInclude Include="..\src\HtmlFormatter.h" />
+    <ClInclude Include="..\src\Menu.h" />
+    <ClInclude Include="..\src\Notifications.h" />
+    <ClInclude Include="..\src\ParseCommandLine.h" />
+    <ClInclude Include="..\src\PdfSync.h" />
+    <ClInclude Include="..\src\Print.h" />
+    <ClInclude Include="..\src\RenderCache.h" />
+    <ClInclude Include="..\src\resource.h" />
+    <ClInclude Include="..\src\Search.h" />
+    <ClInclude Include="..\src\Selection.h" />
+    <ClInclude Include="..\src\SettingsStructs.h" />
+    <ClInclude Include="..\src\StressTesting.h" />
+    <ClInclude Include="..\src\SumatraAbout.h" />
+    <ClInclude Include="..\src\SumatraAbout2.h" />
+    <ClInclude Include="..\src\SumatraDialogs.h" />
+    <ClInclude Include="..\src\SumatraPDF.h" />
+    <ClInclude Include="..\src\SumatraProperties.h" />
+    <ClInclude Include="..\src\SumatraWindow.h" />
+    <ClInclude Include="..\src\TableOfContents.h" />
+    <ClInclude Include="..\src\TextSearch.h" />
+    <ClInclude Include="..\src\TextSelection.h" />
+    <ClInclude Include="..\src\Toolbar.h" />
+    <ClInclude Include="..\src\Translations.h" />
+    <ClInclude Include="..\src\Version.h" />
+    <ClInclude Include="..\src\WindowInfo.h" />
+    <ClInclude Include="..\src\BaseEngine.h" />
+    <ClInclude Include="..\src\ChmDoc.h" />
+    <ClInclude Include="..\src\ChmEngine.h" />
+    <ClInclude Include="..\src\DjVuEngine.h" />
+    <ClInclude Include="..\src\ImagesEngine.h" />
+    <ClInclude Include="..\src\PdfEngine.h" />
+    <ClInclude Include="..\src\PsEngine.h" />
+    <ClInclude Include="..\src\EbookBase.h" />
+    <ClInclude Include="..\src\EbookController.h" />
+    <ClInclude Include="..\src\EbookControls.h" />
+    <ClInclude Include="..\src\EbookDoc.h" />
+    <ClInclude Include="..\src\EbookEngine.h" />
+    <ClInclude Include="..\src\EbookFormatter.h" />
+    <ClInclude Include="..\src\EbookWindow.h" />
+    <ClInclude Include="..\src\MobiDoc.h" />
+    <ClInclude Include="..\src\MuiEbookPageDef.h" />
+    <ClInclude Include="..\src\uia\Constants.h" />
+    <ClInclude Include="..\src\uia\DocumentProvider.h" />
+    <ClInclude Include="..\src\uia\PageProvider.h" />
+    <ClInclude Include="..\src\uia\Provider.h" />
+    <ClInclude Include="..\src\uia\StartPageProvider.h" />
+    <ClInclude Include="..\src\uia\TextRange.h" />
+    <ClInclude Include="..\src\mui\Mui.h" />
+    <ClInclude Include="..\src\mui\MuiBase.h" />
+    <ClInclude Include="..\src\mui\MuiButton.h" />
+    <ClInclude Include="..\src\mui\MuiControl.h" />
+    <ClInclude Include="..\src\mui\MuiCss.h" />
+    <ClInclude Include="..\src\mui\MuiDefs.h" />
+    <ClInclude Include="..\src\mui\MuiEventMgr.h" />
+    <ClInclude Include="..\src\mui\MuiFromText.h" />
+    <ClInclude Include="..\src\mui\MuiGrid.h" />
+    <ClInclude Include="..\src\mui\MuiHwndWrapper.h" />
+    <ClInclude Include="..\src\mui\MuiLayout.h" />
+    <ClInclude Include="..\src\mui\MuiPainter.h" />
+    <ClInclude Include="..\src\mui\MuiScrollBar.h" />
+    <ClInclude Include="..\src\mui\SvgPath.h" />
+    <ClInclude Include="..\src\utils\Allocator.h" />
+    <ClInclude Include="..\src\utils\BaseUtil.h" />
+    <ClInclude Include="..\src\utils\BencUtil.h" />
+    <ClInclude Include="..\src\utils\BitManip.h" />
+    <ClInclude Include="..\src\utils\BitReader.h" />
+    <ClInclude Include="..\src\utils\ByteOrderDecoder.h" />
+    <ClInclude Include="..\src\utils\ByteReader.h" />
+    <ClInclude Include="..\src\utils\CmdLineParser.h" />
+    <ClInclude Include="..\src\utils\CssParser.h" />
+    <ClInclude Include="..\src\utils\DbgHelpDyn.h" />
+    <ClInclude Include="..\src\utils\DebugLog.h" />
+    <ClInclude Include="..\src\utils\DialogSizer.h" />
+    <ClInclude Include="..\src\utils\Dict.h" />
+    <ClInclude Include="..\src\utils\DirIter.h" />
+    <ClInclude Include="..\src\utils\FileTransactions.h" />
+    <ClInclude Include="..\src\utils\FileUtil.h" />
+    <ClInclude Include="..\src\utils\FileWatcher.h" />
+    <ClInclude Include="..\src\utils\FrameTimeoutCalculator.h" />
+    <ClInclude Include="..\src\utils\GdiPlusUtil.h" />
+    <ClInclude Include="..\src\utils\GeomUtil.h" />
+    <ClInclude Include="..\src\utils\HtmlParserLookup.h" />
+    <ClInclude Include="..\src\utils\HtmlPrettyPrint.h" />
+    <ClInclude Include="..\src\utils\HtmlPullParser.h" />
+    <ClInclude Include="..\src\utils\HtmlWindow.h" />
+    <ClInclude Include="..\src\utils\HttpUtil.h" />
+    <ClInclude Include="..\src\utils\JsonParser.h" />
+    <ClInclude Include="..\src\utils\LzmaSimpleArchive.h" />
+    <ClInclude Include="..\src\utils\NoFreeAllocator.h" />
+    <ClInclude Include="..\src\utils\PalmDbReader.h" />
+    <ClInclude Include="..\src\utils\RefCounted.h" />
+    <ClInclude Include="..\src\utils\Scoped.h" />
+    <ClInclude Include="..\src\utils\SerializeTxt.h" />
+    <ClInclude Include="..\src\utils\SettingsUtil.h" />
+    <ClInclude Include="..\src\utils\Sigslot.h" />
+    <ClInclude Include="..\src\utils\SimpleLog.h" />
+    <ClInclude Include="..\src\utils\SquareTreeParser.h" />
+    <ClInclude Include="..\src\utils\StrFormat.h" />
+    <ClInclude Include="..\src\utils\StrHash.h" />
+    <ClInclude Include="..\src\utils\StrSlice.h" />
+    <ClInclude Include="..\src\utils\StrUtil.h" />
+    <ClInclude Include="..\src\utils\TgaReader.h" />
+    <ClInclude Include="..\src\utils\ThreadUtil.h" />
+    <ClInclude Include="..\src\utils\Timer.h" />
+    <ClInclude Include="..\src\utils\Touch.h" />
+    <ClInclude Include="..\src\utils\TrivialHtmlParser.h" />
+    <ClInclude Include="..\src\utils\TxtParser.h" />
+    <ClInclude Include="..\src\utils\UITask.h" />
+    <ClInclude Include="..\src\utils\VarintGob.h" />
+    <ClInclude Include="..\src\utils\Vec.h" />
+    <ClInclude Include="..\src\utils\VecSegmented.h" />
+    <ClInclude Include="..\src\utils\WinUtil.h" />
+    <ClInclude Include="..\src\utils\ZipUtil.h" />
+    <ClInclude Include="..\src\browserplugin\npapi\npapi.h" />
+    <ClInclude Include="..\src\browserplugin\npapi\npfunctions.h" />
+    <ClInclude Include="..\src\browserplugin\npapi\npruntime.h" />
+    <ClInclude Include="..\src\browserplugin\npapi\nptypes.h" />
+    <ClInclude Include="..\src\ifilter\CPdfFilter.h" />
+    <ClInclude Include="..\src\ifilter\CTeXFilter.h" />
+    <ClInclude Include="..\src\ifilter\FilterBase.h" />
+    <ClInclude Include="..\src\ifilter\PdfFilter.h" />
+    <ClInclude Include="..\src\previewer\PdfPreview.h" />
+    <ClInclude Include="..\src\installer\Installer.h" />
+    <ClInclude Include="..\src\installer\Resource.h" />
+    <ClInclude Include="..\ext\CHMLib\src\chm_lib.h" />
+    <ClInclude Include="..\ext\CHMLib\src\lzx.h" />
+    <ClInclude Include="..\mupdf\fitz\fitz-internal.h" />
+    <ClInclude Include="..\mupdf\fitz\fitz.h" />
+    <ClInclude Include="..\mupdf\pdf\data_encodings.h" />
+    <ClInclude Include="..\mupdf\pdf\data_glyphlist.h" />
+    <ClInclude Include="..\mupdf\pdf\mupdf-internal.h" />
+    <ClInclude Include="..\mupdf\pdf\mupdf.h" />
+    <ClInclude Include="..\mupdf\pdf\pdf_jsimp_cpp.h" />
+    <ClInclude Include="..\mupdf\xps\muxps-internal.h" />
+    <ClInclude Include="..\mupdf\xps\muxps.h" />
+    <ClInclude Include="..\mupdf\apps\pdfapp.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <Manifest Include="..\src\installer\Installer.exe.manifest" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\src\EbookWinDesc.txt" />
+    <None Include="..\src\mui\mui-todo.txt" />
+    <None Include="..\docs\codingstyle.txt" />
+    <None Include="..\docs\mui-html-fusion.txt" />
+    <None Include="..\docs\releasenotes.txt" />
+    <None Include="..\docs\releaseplan.txt" />
+    <None Include="..\docs\SumatraPDF-user.ini" />
+    <None Include="..\docs\sumatrapdfrestrict.ini" />
+    <None Include="..\docs\wishlist.txt" />
+    <None Include="..\src\dragcursor.cur" />
+    <None Include="..\src\PdfDoc.ico" />
+    <None Include="..\src\reloading.bmp" />
+    <None Include="..\src\SumatraPDF-smaller.ico" />
+    <None Include="..\src\SumatraPDF.ico" />
+    <None Include="..\src\toolbar_11.bmp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\src\browserplugin\npPdfViewer.rc" />
+    <ResourceCompile Include="..\src\libmupdf.rc" />
+    <ResourceCompile Include="..\src\SumatraPDF.rc" />
+    <ResourceCompile Include="..\src\ifilter\PdfFilter.rc" />
+    <ResourceCompile Include="..\src\previewer\PdfPreview.rc" />
+    <ResourceCompile Include="..\src\installer\Installer.rc" />
+  </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
